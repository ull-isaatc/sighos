
//----------------------------------------------------
//The following code was generated by CUP v0.10j
//Tue Aug 05 16:27:19 BST 2008
//----------------------------------------------------

package es.ull.iis.simulation.factory;


/** CUP v0.10j generated parser.
 * @version Tue Aug 05 16:27:19 BST 2008
 */
public class TagProcessParser extends java_cup.runtime.lr_parser {

	/** Default constructor. */
	public TagProcessParser() {super();}

	/** Constructor which sets the default scanner. */
	public TagProcessParser(java_cup.runtime.Scanner s) {super(s);}

	/** Production table. */
	protected static final short _production_table[][] = 
		unpackFromStrings(new String[] {
				"\000\114\000\002\003\002\000\002\002\004\000\002\003" +
				"\005\000\002\003\004\000\002\005\003\000\002\005\003" +
				"\000\002\006\007\000\002\010\004\000\002\010\004\000" +
				"\002\010\004\000\002\010\004\000\002\010\004\000\002" +
				"\010\004\000\002\010\004\000\002\015\003\000\002\015" +
				"\003\000\002\015\003\000\002\015\003\000\002\015\003" +
				"\000\002\015\004\000\002\016\003\000\002\016\003\000" +
				"\002\016\003\000\002\016\003\000\002\016\003\000\002" +
				"\016\003\000\002\016\003\000\002\016\003\000\002\016" +
				"\003\000\002\016\003\000\002\016\004\000\002\017\003" +
				"\000\002\017\003\000\002\017\003\000\002\017\004\000" +
				"\002\020\003\000\002\020\003\000\002\020\004\000\002" +
				"\021\003\000\002\021\003\000\002\021\004\000\002\022" +
				"\003\000\002\022\003\000\002\022\004\000\002\023\003" +
				"\000\002\023\003\000\002\023\004\000\002\024\002\000" +
				"\002\024\005\000\002\007\007\000\002\004\005\000\002" +
				"\011\004\000\002\011\004\000\002\011\004\000\002\011" +
				"\004\000\002\011\004\000\002\011\004\000\002\011\004" +
				"\000\002\012\005\000\002\012\003\000\002\012\004\000" +
				"\002\012\004\000\002\012\003\000\002\013\002\000\002" +
				"\013\004\000\002\013\004\000\002\013\006\000\002\013" +
				"\004\000\002\014\003\000\002\014\003\000\002\014\003" +
				"\000\002\014\003\000\002\014\003\000\002\014\003\000" +
		"\002\014\003\000\002\014\003" });

	/** Access to production table. */
	public short[][] production_table() {return _production_table;}

	/** Parse-action table. */
	protected static final short[][] _action_table = 
		unpackFromStrings(new String[] {
				"\000\171\000\010\002\001\004\005\055\004\001\002\000" +
				"\010\002\001\004\005\055\004\001\002\000\006\005\010" +
				"\006\012\001\002\000\004\002\007\001\002\000\004\002" +
				"\000\001\002\000\004\010\076\001\002\000\010\002\001" +
				"\004\005\055\004\001\002\000\004\010\015\001\002\000" +
				"\010\002\ufffd\004\ufffd\055\ufffd\001\002\000\010\002\ufffc" +
				"\004\ufffc\055\ufffc\001\002\000\020\016\016\017\020\020" +
				"\025\021\017\022\023\023\021\024\024\001\002\000\004" +
				"\054\074\001\002\000\004\054\073\001\002\000\004\054" +
				"\072\001\002\000\004\054\071\001\002\000\004\011\067" +
				"\001\002\000\004\054\066\001\002\000\004\054\065\001" +
				"\002\000\004\054\064\001\002\000\004\012\027\001\002" +
				"\000\042\004\030\010\037\011\uffc2\013\040\014\045\015" +
				"\033\025\046\026\032\027\031\030\051\031\050\032\042" +
				"\033\041\034\036\053\047\054\034\001\002\000\004\005" +
				"\010\001\002\000\044\004\uffba\010\uffba\011\uffba\012\uffba" +
				"\013\uffba\014\uffba\015\uffba\025\uffba\026\uffba\027\uffba\030" +
				"\uffba\031\uffba\032\uffba\033\uffba\034\uffba\053\uffba\054\uffba" +
				"\001\002\000\044\004\uffbc\010\uffbc\011\uffbc\012\uffbc\013" +
				"\uffbc\014\uffbc\015\uffbc\025\uffbc\026\uffbc\027\uffbc\030\uffbc" +
				"\031\uffbc\032\uffbc\033\uffbc\034\uffbc\053\uffbc\054\uffbc\001" +
				"\002\000\044\004\030\010\037\011\uffc2\012\uffc2\013\040" +
				"\014\045\015\033\025\046\026\032\027\031\030\051\031" +
				"\050\032\042\033\041\034\036\053\047\054\034\001\002" +
				"\000\016\010\037\011\uffc2\012\uffc2\014\045\015\033\054" +
				"\034\001\002\000\044\004\030\010\037\011\uffc2\012\uffc2" +
				"\013\040\014\045\015\033\025\046\026\032\027\031\030" +
				"\051\031\050\032\042\033\041\034\036\053\047\054\034" +
				"\001\002\000\044\004\uffb6\010\uffb6\011\uffb6\012\uffb6\013" +
				"\uffb6\014\uffb6\015\uffb6\025\uffb6\026\uffb6\027\uffb6\030\uffb6" +
				"\031\uffb6\032\uffb6\033\uffb6\034\uffb6\053\uffb6\054\uffb6\001" +
				"\002\000\042\004\030\010\037\011\uffc2\013\040\014\045" +
				"\015\033\025\046\026\032\027\031\030\051\031\050\032" +
				"\042\033\041\034\036\053\047\054\034\001\002\000\044" +
				"\004\030\010\037\011\uffc2\012\uffc2\013\040\014\045\015" +
				"\033\025\046\026\032\027\031\030\051\031\050\032\042" +
				"\033\041\034\036\053\047\054\034\001\002\000\044\004" +
				"\uffb8\010\uffb8\011\uffb8\012\uffb8\013\uffb8\014\uffb8\015\uffb8" +
				"\025\uffb8\026\uffb8\027\uffb8\030\uffb8\031\uffb8\032\uffb8\033" +
				"\uffb8\034\uffb8\053\uffb8\054\uffb8\001\002\000\044\004\uffb9" +
				"\010\uffb9\011\uffb9\012\uffb9\013\uffb9\014\uffb9\015\uffb9\025" +
				"\uffb9\026\uffb9\027\uffb9\030\uffb9\031\uffb9\032\uffb9\033\uffb9" +
				"\034\uffb9\053\uffb9\054\uffb9\001\002\000\006\011\uffc6\012" +
				"\uffc6\001\002\000\004\011\uffcf\001\002\000\016\010\037" +
				"\011\uffc2\012\uffc2\014\045\015\033\054\034\001\002\000" +
				"\044\004\uffbd\010\uffbd\011\uffbd\012\uffbd\013\uffbd\014\uffbd" +
				"\015\uffbd\025\uffbd\026\uffbd\027\uffbd\030\uffbd\031\uffbd\032" +
				"\uffbd\033\uffbd\034\uffbd\053\uffbd\054\uffbd\001\002\000\006" +
				"\011\uffc3\012\uffc3\001\002\000\044\004\uffb7\010\uffb7\011" +
				"\uffb7\012\uffb7\013\uffb7\014\uffb7\015\uffb7\025\uffb7\026\uffb7" +
				"\027\uffb7\030\uffb7\031\uffb7\032\uffb7\033\uffb7\034\uffb7\053" +
				"\uffb7\054\uffb7\001\002\000\044\004\uffbb\010\uffbb\011\uffbb" +
				"\012\uffbb\013\uffbb\014\uffbb\015\uffbb\025\uffbb\026\uffbb\027" +
				"\uffbb\030\uffbb\031\uffbb\032\uffbb\033\uffbb\034\uffbb\053\uffbb" +
				"\054\uffbb\001\002\000\006\011\uffc0\012\uffc0\001\002\000" +
				"\006\011\uffc5\012\uffc5\001\002\000\004\011\055\001\002" +
				"\000\016\010\037\011\uffc2\012\uffc2\014\045\015\033\054" +
				"\034\001\002\000\006\011\uffbf\012\uffbf\001\002\000\006" +
				"\011\uffc4\012\uffc4\001\002\000\006\011\uffc1\012\uffc1\001" +
				"\002\000\006\011\uffbe\012\uffbe\001\002\000\044\004\030" +
				"\010\037\011\uffc2\012\uffc2\013\040\014\045\015\033\025" +
				"\046\026\032\027\031\030\051\031\050\032\042\033\041" +
				"\034\036\053\047\054\034\001\002\000\006\011\uffc7\012" +
				"\uffc7\001\002\000\004\012\uffcc\001\002\000\004\012\uffc9" +
				"\001\002\000\004\012\uffca\001\002\000\004\007\070\001" +
				"\002\000\010\002\uffd0\004\uffd0\055\uffd0\001\002\000\004" +
				"\012\uffc8\001\002\000\004\012\uffcd\001\002\000\004\012" +
				"\uffcb\001\002\000\004\012\uffce\001\002\000\004\002\uffff" +
				"\001\002\000\020\016\104\017\105\020\077\021\101\022" +
				"\106\023\103\024\100\001\002\000\012\044\165\051\171" +
				"\052\167\054\170\001\002\000\010\044\160\052\162\054" +
				"\163\001\002\000\010\044\153\052\155\054\156\001\002" +
				"\000\004\011\151\001\002\000\010\044\144\052\146\054" +
				"\147\001\002\000\016\044\134\046\142\047\136\050\141" +
				"\052\137\054\140\001\002\000\030\035\123\036\120\037" +
				"\125\040\130\041\132\042\131\043\122\044\127\045\121" +
				"\052\117\054\124\001\002\000\010\044\107\052\110\054" +
				"\112\001\002\000\004\011\uffda\001\002\000\006\011\uffd2" +
				"\012\113\001\002\000\004\011\ufff6\001\002\000\004\011" +
				"\uffdb\001\002\000\044\004\030\010\037\011\uffc2\012\uffc2" +
				"\013\040\014\045\015\033\025\046\026\032\027\031\030" +
				"\051\031\050\032\042\033\041\034\036\053\047\054\034" +
				"\001\002\000\004\011\uffd9\001\002\000\006\011\uffd2\012" +
				"\113\001\002\000\004\011\uffd1\001\002\000\006\011\uffd2" +
				"\012\113\001\002\000\004\011\uffeb\001\002\000\004\011" +
				"\uffe4\001\002\000\004\011\uffe6\001\002\000\004\011\uffec" +
				"\001\002\000\004\011\uffed\001\002\000\004\011\uffea\001" +
				"\002\000\004\011\ufff9\001\002\000\004\011\uffe5\001\002" +
				"\000\004\011\uffe9\001\002\000\004\011\uffe7\001\002\000" +
				"\004\011\uffe8\001\002\000\004\011\uffe3\001\002\000\004" +
				"\011\ufff2\001\002\000\004\011\ufffa\001\002\000\004\011" +
				"\ufff0\001\002\000\006\011\uffd2\012\113\001\002\000\004" +
				"\011\ufff3\001\002\000\004\011\uffef\001\002\000\004\011" +
				"\ufff1\001\002\000\004\011\uffee\001\002\000\004\011\uffd4" +
				"\001\002\000\004\011\ufff4\001\002\000\006\011\uffd2\012" +
				"\113\001\002\000\004\011\uffd5\001\002\000\004\011\uffd3" +
				"\001\002\000\004\007\152\001\002\000\050\002\ufffb\004" +
				"\ufffb\010\ufffb\011\ufffb\012\ufffb\013\ufffb\014\ufffb\015\ufffb" +
				"\025\ufffb\026\ufffb\027\ufffb\030\ufffb\031\ufffb\032\ufffb\033" +
				"\ufffb\034\ufffb\053\ufffb\054\ufffb\055\ufffb\001\002\000\004" +
				"\011\uffdd\001\002\000\004\011\ufff7\001\002\000\006\011" +
				"\uffd2\012\113\001\002\000\004\011\uffde\001\002\000\004" +
				"\011\uffdc\001\002\000\004\011\uffd7\001\002\000\004\011" +
				"\ufff5\001\002\000\006\011\uffd2\012\113\001\002\000\004" +
				"\011\uffd8\001\002\000\004\011\uffd6\001\002\000\004\011" +
				"\uffe1\001\002\000\004\011\ufff8\001\002\000\006\011\uffd2" +
				"\012\113\001\002\000\004\011\uffe2\001\002\000\004\011" +
				"\uffe0\001\002\000\004\011\uffdf\001\002\000\004\002\ufffe" +
		"\001\002" });

	/** Access to parse-action table. */
	public short[][] action_table() {return _action_table;}

	/** <code>reduce_goto</code> table. */
	protected static final short[][] _reduce_table = 
		unpackFromStrings(new String[] {
				"\000\171\000\004\003\005\001\001\000\004\003\172\001" +
				"\001\000\010\005\010\006\012\007\013\001\001\000\002" +
				"\001\001\000\002\001\001\000\002\001\001\000\004\003" +
				"\074\001\001\000\002\001\001\000\002\001\001\000\002" +
				"\001\001\000\006\004\021\011\025\001\001\000\002\001" +
				"\001\000\002\001\001\000\002\001\001\000\002\001\001" +
				"\000\002\001\001\000\002\001\001\000\002\001\001\000" +
				"\002\001\001\000\002\001\001\000\010\012\043\013\042" +
				"\014\034\001\001\000\004\006\061\001\001\000\002\001" +
				"\001\000\002\001\001\000\010\012\060\013\042\014\034" +
				"\001\001\000\004\013\057\001\001\000\010\012\056\013" +
				"\042\014\034\001\001\000\002\001\001\000\010\012\053" +
				"\013\042\014\034\001\001\000\010\012\052\013\042\014" +
				"\034\001\001\000\002\001\001\000\002\001\001\000\002" +
				"\001\001\000\002\001\001\000\004\013\051\001\001\000" +
				"\002\001\001\000\002\001\001\000\002\001\001\000\002" +
				"\001\001\000\002\001\001\000\002\001\001\000\002\001" +
				"\001\000\004\013\055\001\001\000\002\001\001\000\002" +
				"\001\001\000\002\001\001\000\002\001\001\000\010\012" +
				"\062\013\042\014\034\001\001\000\002\001\001\000\002" +
				"\001\001\000\002\001\001\000\002\001\001\000\002\001" +
				"\001\000\002\001\001\000\002\001\001\000\002\001\001" +
				"\000\002\001\001\000\002\001\001\000\002\001\001\000" +
				"\004\010\101\001\001\000\004\017\165\001\001\000\004" +
				"\022\160\001\001\000\004\020\153\001\001\000\002\001" +
				"\001\000\004\023\144\001\001\000\004\015\134\001\001" +
				"\000\004\016\125\001\001\000\004\021\110\001\001\000" +
				"\002\001\001\000\004\024\113\001\001\000\002\001\001" +
				"\000\002\001\001\000\010\012\114\013\042\014\034\001" +
				"\001\000\002\001\001\000\004\024\115\001\001\000\002" +
				"\001\001\000\004\024\132\001\001\000\002\001\001\000" +
				"\002\001\001\000\002\001\001\000\002\001\001\000\002" +
				"\001\001\000\002\001\001\000\002\001\001\000\002\001" +
				"\001\000\002\001\001\000\002\001\001\000\002\001\001" +
				"\000\002\001\001\000\002\001\001\000\002\001\001\000" +
				"\002\001\001\000\004\024\142\001\001\000\002\001\001" +
				"\000\002\001\001\000\002\001\001\000\002\001\001\000" +
				"\002\001\001\000\002\001\001\000\004\024\147\001\001" +
				"\000\002\001\001\000\002\001\001\000\002\001\001\000" +
				"\002\001\001\000\002\001\001\000\002\001\001\000\004" +
				"\024\156\001\001\000\002\001\001\000\002\001\001\000" +
				"\002\001\001\000\002\001\001\000\004\024\163\001\001" +
				"\000\002\001\001\000\002\001\001\000\002\001\001\000" +
				"\002\001\001\000\004\024\171\001\001\000\002\001\001" +
		"\000\002\001\001\000\002\001\001\000\002\001\001" });

	/** Access to <code>reduce_goto</code> table. */
	public short[][] reduce_table() {return _reduce_table;}

	/** Instance of action encapsulation class. */
	protected CUP$TagProcessParser$actions action_obj;

	/** Action encapsulation object initializer. */
	protected void init_actions()
	{
		action_obj = new CUP$TagProcessParser$actions(this);
	}

	/** Invoke a user supplied parse action. */
	@SuppressWarnings("unchecked")
	public java_cup.runtime.Symbol do_action(
			int                        act_num,
			java_cup.runtime.lr_parser parser,
			java.util.Stack            stack,
			int                        top)
	throws java.lang.Exception
	{
		/* call code in generated class */
		return action_obj.CUP$TagProcessParser$do_action(act_num, parser, stack, top);
	}

	/** Indicates start state. */
	public int start_state() {return 0;}
	/** Indicates start production. */
	public int start_production() {return 1;}

	/** <code>EOF</code> Symbol index. */
	public int EOF_sym() {return 0;}

	/** <code>error</code> Symbol index. */
	public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$TagProcessParser$actions {


	private void reportError(String error) {
		java.lang.Error err = new Error(error);

		err.printStackTrace();
	}

	@SuppressWarnings("unused")
	private final TagProcessParser parser;

	/** Constructor */
	CUP$TagProcessParser$actions(TagProcessParser parser) {
		this.parser = parser;
	}

	/** Method with the actual generated action code. */
	@SuppressWarnings("unchecked")
	public final java_cup.runtime.Symbol CUP$TagProcessParser$do_action(
			int                        CUP$TagProcessParser$act_num,
			java_cup.runtime.lr_parser CUP$TagProcessParser$parser,
			java.util.Stack            CUP$TagProcessParser$stack,
			int                        CUP$TagProcessParser$top)
	throws java.lang.Exception
	{
		/* Symbol object for return from actions */
		java_cup.runtime.Symbol CUP$TagProcessParser$result;

		/* select the action based on the action number */
		switch (CUP$TagProcessParser$act_num)
		{
		/*. . . . . . . . . . . . . . . . . . . .*/
		case 75: // param ::= WGPARAM 
		{
			String RESULT = null;
			SymbolValue p = (SymbolValue)((java_cup.runtime.Symbol) CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-0)).value;

			String match = p.getValue();
			int pointPos = match.indexOf(".");
			String actNumber = match.substring(1,pointPos);
			String wgNumber = match.substring(pointPos + 3,p.getValue().length());
			RESULT = "simul.getActivity(" + actNumber + ").getWorkGroup(" + wgNumber + ")";

			CUP$TagProcessParser$result = new java_cup.runtime.Symbol(10/*param*/, ((java_cup.runtime.Symbol)CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-0)).right, RESULT);
		}
		return CUP$TagProcessParser$result;

		/*. . . . . . . . . . . . . . . . . . . .*/
		case 74: // param ::= ELEMTYPEPARAM 
		{
			String RESULT = null;
			SymbolValue p = (SymbolValue)((java_cup.runtime.Symbol) CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-0)).value;

			String number = p.getValue().substring(2,p.getValue().length());
			RESULT = "simul.getElementType(" + number + ")";

			CUP$TagProcessParser$result = new java_cup.runtime.Symbol(10/*param*/, ((java_cup.runtime.Symbol)CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-0)).right, RESULT);
		}
		return CUP$TagProcessParser$result;

		/*. . . . . . . . . . . . . . . . . . . .*/
		case 73: // param ::= DINELEMTYPEPARAM 
		{
			String RESULT = null;
			RESULT = "((Element)e).getElementType()";

			CUP$TagProcessParser$result = new java_cup.runtime.Symbol(10/*param*/, ((java_cup.runtime.Symbol)CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-0)).right, RESULT);
		}
		return CUP$TagProcessParser$result;

		/*. . . . . . . . . . . . . . . . . . . .*/
		case 72: // param ::= DINELEMPARAM 
		{
			String RESULT = null;
			RESULT = "e";

			CUP$TagProcessParser$result = new java_cup.runtime.Symbol(10/*param*/, ((java_cup.runtime.Symbol)CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-0)).right, RESULT);
		}
		return CUP$TagProcessParser$result;

		/*. . . . . . . . . . . . . . . . . . . .*/
		case 71: // param ::= RESTYPEPARAM 
		{
			String RESULT = null;
			SymbolValue p = (SymbolValue)((java_cup.runtime.Symbol) CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-0)).value;

			String number = p.getValue().substring(2,p.getValue().length());
			RESULT = "simul.getResourceType(" + number + ")";

			CUP$TagProcessParser$result = new java_cup.runtime.Symbol(10/*param*/, ((java_cup.runtime.Symbol)CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-0)).right, RESULT);
		}
		return CUP$TagProcessParser$result;

		/*. . . . . . . . . . . . . . . . . . . .*/
		case 70: // param ::= RESPARAM 
		{
			String RESULT = null;
			SymbolValue p = (SymbolValue)((java_cup.runtime.Symbol) CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-0)).value;

			String number = p.getValue().substring(1,p.getValue().length());
			RESULT = "simul.getResourceList().get(" + number + ")";  

			CUP$TagProcessParser$result = new java_cup.runtime.Symbol(10/*param*/, ((java_cup.runtime.Symbol)CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-0)).right, RESULT);
		}
		return CUP$TagProcessParser$result;

		/*. . . . . . . . . . . . . . . . . . . .*/
		case 69: // param ::= SIMULPARAM 
		{
			String RESULT = null;

			RESULT = "simul"; 

			CUP$TagProcessParser$result = new java_cup.runtime.Symbol(10/*param*/, ((java_cup.runtime.Symbol)CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-0)).right, RESULT);
		}
		return CUP$TagProcessParser$result;

		/*. . . . . . . . . . . . . . . . . . . .*/
		case 68: // param ::= ACTPARAM 
		{
			String RESULT = null;
			SymbolValue p = (SymbolValue)((java_cup.runtime.Symbol) CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-0)).value;

			String number = p.getValue().substring(1,p.getValue().length());
			RESULT = "simul.getActivity(" + number + ")"; 

			CUP$TagProcessParser$result = new java_cup.runtime.Symbol(10/*param*/, ((java_cup.runtime.Symbol)CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-0)).right, RESULT);
		}
		return CUP$TagProcessParser$result;

		/*. . . . . . . . . . . . . . . . . . . .*/
		case 67: // complexvalue ::= CHAR value 
		{
			String RESULT = null;
			SymbolValue ch = (SymbolValue)((java_cup.runtime.Symbol) CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-1)).value;
			String val = (String)((java_cup.runtime.Symbol) CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-0)).value;
			RESULT = ch.getValue() + val; 
			CUP$TagProcessParser$result = new java_cup.runtime.Symbol(9/*complexvalue*/, ((java_cup.runtime.Symbol)CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-0)).right, RESULT);
		}
		return CUP$TagProcessParser$result;

		/*. . . . . . . . . . . . . . . . . . . .*/
		case 66: // complexvalue ::= LPAREN value RPAREN complexvalue 
		{
			String RESULT = null;
			String val = (String)((java_cup.runtime.Symbol) CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-2)).value;
			String cmp2 = (String)((java_cup.runtime.Symbol) CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-0)).value;
			RESULT = "(" + val + ")" + cmp2; 
			CUP$TagProcessParser$result = new java_cup.runtime.Symbol(9/*complexvalue*/, ((java_cup.runtime.Symbol)CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-0)).right, RESULT);
		}
		return CUP$TagProcessParser$result;

		/*. . . . . . . . . . . . . . . . . . . .*/
		case 65: // complexvalue ::= DOT complexvalue 
		{
			String RESULT = null;
			String cmp = (String)((java_cup.runtime.Symbol) CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-0)).value;
			RESULT = "." + cmp; 
			CUP$TagProcessParser$result = new java_cup.runtime.Symbol(9/*complexvalue*/, ((java_cup.runtime.Symbol)CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-0)).right, RESULT);
		}
		return CUP$TagProcessParser$result;

		/*. . . . . . . . . . . . . . . . . . . .*/
		case 64: // complexvalue ::= VALUE complexvalue 
		{
			String RESULT = null;
			SymbolValue val = (SymbolValue)((java_cup.runtime.Symbol) CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-1)).value;
			String cmp = (String)((java_cup.runtime.Symbol) CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-0)).value;
			RESULT = val.getValue() + cmp; 
			CUP$TagProcessParser$result = new java_cup.runtime.Symbol(9/*complexvalue*/, ((java_cup.runtime.Symbol)CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-0)).right, RESULT);
		}
		return CUP$TagProcessParser$result;

		/*. . . . . . . . . . . . . . . . . . . .*/
		case 63: // complexvalue ::= 
		{
			String RESULT = null;
			RESULT = ""; 
			CUP$TagProcessParser$result = new java_cup.runtime.Symbol(9/*complexvalue*/, ((java_cup.runtime.Symbol)CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-0)).right, RESULT);
		}
		return CUP$TagProcessParser$result;

		/*. . . . . . . . . . . . . . . . . . . .*/
		case 62: // value ::= CURRENTTS 
		{
			String RESULT = null;
			RESULT = "e.getTs()"; 
			CUP$TagProcessParser$result = new java_cup.runtime.Symbol(8/*value*/, ((java_cup.runtime.Symbol)CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-0)).right, RESULT);
		}
		return CUP$TagProcessParser$result;

		/*. . . . . . . . . . . . . . . . . . . .*/
		case 61: // value ::= param value 
		{
			String RESULT = null;
			String p = (String)((java_cup.runtime.Symbol) CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-1)).value;
			String val = (String)((java_cup.runtime.Symbol) CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-0)).value;
			RESULT = p + val; 
			CUP$TagProcessParser$result = new java_cup.runtime.Symbol(8/*value*/, ((java_cup.runtime.Symbol)CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-0)).right, RESULT);
		}
		return CUP$TagProcessParser$result;

		/*. . . . . . . . . . . . . . . . . . . .*/
		case 60: // value ::= SPACE value 
		{
			String RESULT = null;
			String val = (String)((java_cup.runtime.Symbol) CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-0)).value;
			RESULT = " " + val; 
			CUP$TagProcessParser$result = new java_cup.runtime.Symbol(8/*value*/, ((java_cup.runtime.Symbol)CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-0)).right, RESULT);
		}
		return CUP$TagProcessParser$result;

		/*. . . . . . . . . . . . . . . . . . . .*/
		case 59: // value ::= complexvalue 
		{
			String RESULT = null;
			String val = (String)((java_cup.runtime.Symbol) CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-0)).value;
			RESULT = val; 
			CUP$TagProcessParser$result = new java_cup.runtime.Symbol(8/*value*/, ((java_cup.runtime.Symbol)CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-0)).right, RESULT);
		}
		return CUP$TagProcessParser$result;

		/*. . . . . . . . . . . . . . . . . . . .*/
		case 58: // value ::= STARTTAG gettagexp value 
		{
			String RESULT = null;
			String tag = (String)((java_cup.runtime.Symbol) CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-1)).value;
			String val = (String)((java_cup.runtime.Symbol) CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-0)).value;
			RESULT = tag + val; 
			CUP$TagProcessParser$result = new java_cup.runtime.Symbol(8/*value*/, ((java_cup.runtime.Symbol)CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-0)).right, RESULT);
		}
		return CUP$TagProcessParser$result;

		/*. . . . . . . . . . . . . . . . . . . .*/
		case 57: // setid ::= DINELEM VALUE 
		{
			String RESULT = null;
			SymbolValue var = (SymbolValue)((java_cup.runtime.Symbol) CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-0)).value;

			RESULT = "e.putVar(\"" + var.getValue() + "\""; 

			CUP$TagProcessParser$result = new java_cup.runtime.Symbol(7/*setid*/, ((java_cup.runtime.Symbol)CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-0)).right, RESULT);
		}
		return CUP$TagProcessParser$result;

		/*. . . . . . . . . . . . . . . . . . . .*/
		case 56: // setid ::= DINELEMTYPE VALUE 
		{
			String RESULT = null;
			SymbolValue var = (SymbolValue)((java_cup.runtime.Symbol) CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-0)).value;

			RESULT = "((Element)e).getElementType().putVar(\"" + var.getValue() + "\""; 

			CUP$TagProcessParser$result = new java_cup.runtime.Symbol(7/*setid*/, ((java_cup.runtime.Symbol)CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-0)).right, RESULT);
		}
		return CUP$TagProcessParser$result;

		/*. . . . . . . . . . . . . . . . . . . .*/
		case 55: // setid ::= ELEMTYPE VALUE 
		{
			String RESULT = null;
			SymbolValue id = (SymbolValue)((java_cup.runtime.Symbol) CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-1)).value;
			SymbolValue var = (SymbolValue)((java_cup.runtime.Symbol) CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-0)).value;

			int pos = id.getValue().indexOf(".");
			String number = id.getValue().substring(1,pos);
			RESULT = "simul.getElementType(" + number + ").putVar(\"" + var.getValue() + "\""; 

			CUP$TagProcessParser$result = new java_cup.runtime.Symbol(7/*setid*/, ((java_cup.runtime.Symbol)CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-0)).right, RESULT);
		}
		return CUP$TagProcessParser$result;

		/*. . . . . . . . . . . . . . . . . . . .*/
		case 54: // setid ::= RES VALUE 
		{
			String RESULT = null;
			SymbolValue id = (SymbolValue)((java_cup.runtime.Symbol) CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-1)).value;
			SymbolValue var = (SymbolValue)((java_cup.runtime.Symbol) CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-0)).value;

			int pos = id.getValue().indexOf(".");
			String number = id.getValue().substring(1,pos);
			RESULT = "simul.getResourceList().get(" + number + ").putVar(\"" + var.getValue() + "\""; 

			CUP$TagProcessParser$result = new java_cup.runtime.Symbol(7/*setid*/, ((java_cup.runtime.Symbol)CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-0)).right, RESULT);
		}
		return CUP$TagProcessParser$result;

		/*. . . . . . . . . . . . . . . . . . . .*/
		case 53: // setid ::= RESTYPE VALUE 
		{
			String RESULT = null;
			SymbolValue id = (SymbolValue)((java_cup.runtime.Symbol) CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-1)).value;
			SymbolValue var = (SymbolValue)((java_cup.runtime.Symbol) CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-0)).value;

			int pos = id.getValue().indexOf(".");
			String number = id.getValue().substring(1,pos);
			RESULT = "simul.getResourceType(" + number + ").putVar(\"" + var.getValue() + "\""; 

			CUP$TagProcessParser$result = new java_cup.runtime.Symbol(7/*setid*/, ((java_cup.runtime.Symbol)CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-0)).right, RESULT);
		}
		return CUP$TagProcessParser$result;

		/*. . . . . . . . . . . . . . . . . . . .*/
		case 52: // setid ::= SIMUL VALUE 
		{
			String RESULT = null;
			SymbolValue var = (SymbolValue)((java_cup.runtime.Symbol) CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-0)).value;

			RESULT = "simul.putVar(\"" + var.getValue() + "\""; 

			CUP$TagProcessParser$result = new java_cup.runtime.Symbol(7/*setid*/, ((java_cup.runtime.Symbol)CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-0)).right, RESULT);
		}
		return CUP$TagProcessParser$result;

		/*. . . . . . . . . . . . . . . . . . . .*/
		case 51: // setid ::= ACT VALUE 
		{
			String RESULT = null;
			SymbolValue id = (SymbolValue)((java_cup.runtime.Symbol) CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-1)).value;
			SymbolValue var = (SymbolValue)((java_cup.runtime.Symbol) CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-0)).value;

			int pos = id.getValue().indexOf(".");
			String number = id.getValue().substring(1,pos);
			RESULT = "simul.getActivity(" + number + ").putVar(\"" + var.getValue() + "\""; 

			CUP$TagProcessParser$result = new java_cup.runtime.Symbol(7/*setid*/, ((java_cup.runtime.Symbol)CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-0)).right, RESULT);
		}
		return CUP$TagProcessParser$result;

		/*. . . . . . . . . . . . . . . . . . . .*/
		case 50: // setparams ::= setid COMMA value 
		{
			String RESULT = null;
			String id = (String)((java_cup.runtime.Symbol) CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-2)).value;
			String val = (String)((java_cup.runtime.Symbol) CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-0)).value;
			RESULT = id + "," + val + ")"; 
			CUP$TagProcessParser$result = new java_cup.runtime.Symbol(2/*setparams*/, ((java_cup.runtime.Symbol)CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-0)).right, RESULT);
		}
		return CUP$TagProcessParser$result;

		/*. . . . . . . . . . . . . . . . . . . .*/
		case 49: // settagexp ::= SETTAG LPAREN setparams RPAREN ENDTAG 
		{
			String RESULT = null;
			String exp = (String)((java_cup.runtime.Symbol) CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-2)).value;
			RESULT = exp; 
			CUP$TagProcessParser$result = new java_cup.runtime.Symbol(5/*settagexp*/, ((java_cup.runtime.Symbol)CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-0)).right, RESULT);
		}
		return CUP$TagProcessParser$result;

		/*. . . . . . . . . . . . . . . . . . . .*/
		case 48: // getparams ::= COMMA value getparams 
		{
			String RESULT = null;
			String val = (String)((java_cup.runtime.Symbol) CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-1)).value;
			String params = (String)((java_cup.runtime.Symbol) CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-0)).value;
			RESULT = "," + val + params; 
			CUP$TagProcessParser$result = new java_cup.runtime.Symbol(18/*getparams*/, ((java_cup.runtime.Symbol)CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-0)).right, RESULT);
		}
		return CUP$TagProcessParser$result;

		/*. . . . . . . . . . . . . . . . . . . .*/
		case 47: // getparams ::= 
		{
			String RESULT = null;
			RESULT = ""; 
			CUP$TagProcessParser$result = new java_cup.runtime.Symbol(18/*getparams*/, ((java_cup.runtime.Symbol)CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-0)).right, RESULT);
		}
		return CUP$TagProcessParser$result;

		/*. . . . . . . . . . . . . . . . . . . .*/
		case 46: // degetcharac ::= VARVIEW getparams 
		{
			String RESULT = null;
			SymbolValue var = (SymbolValue)((java_cup.runtime.Symbol) CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-1)).value;
			String param = (String)((java_cup.runtime.Symbol) CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-0)).value;

			if ((var.getValue().compareTo("executionTime") == 0) || (var.getValue().compareTo("waitTime") == 0)
					|| (var.getValue().compareTo("executionCounter") == 0) 
					|| (var.getValue().compareTo("requestCounter") == 0)) 
				RESULT = "getVarViewValue(\"" + var.getValue() + "\"" + param + ")"; 	

			CUP$TagProcessParser$result = new java_cup.runtime.Symbol(17/*degetcharac*/, ((java_cup.runtime.Symbol)CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-0)).right, RESULT);
		}
		return CUP$TagProcessParser$result;

		/*. . . . . . . . . . . . . . . . . . . .*/
		case 45: // degetcharac ::= ID 
		{
			String RESULT = null;
			RESULT = "getId()"; 
			CUP$TagProcessParser$result = new java_cup.runtime.Symbol(17/*degetcharac*/, ((java_cup.runtime.Symbol)CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-0)).right, RESULT);
		}
		return CUP$TagProcessParser$result;

		/*. . . . . . . . . . . . . . . . . . . .*/
		case 44: // degetcharac ::= VALUE 
		{
			String RESULT = null;
			SymbolValue var = (SymbolValue)((java_cup.runtime.Symbol) CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-0)).value;
			RESULT = "getVar(\"" + var.getValue() + "\").getValue().doubleValue()"; 
			CUP$TagProcessParser$result = new java_cup.runtime.Symbol(17/*degetcharac*/, ((java_cup.runtime.Symbol)CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-0)).right, RESULT);
		}
		return CUP$TagProcessParser$result;

		/*. . . . . . . . . . . . . . . . . . . .*/
		case 43: // detgetcharac ::= VARVIEW getparams 
		{
			String RESULT = null;
			SymbolValue var = (SymbolValue)((java_cup.runtime.Symbol) CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-1)).value;
			String param = (String)((java_cup.runtime.Symbol) CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-0)).value;

			if ((var.getValue().compareTo("executionTime") == 0) || (var.getValue().compareTo("waitTime") == 0)
					|| (var.getValue().compareTo("executionCounter") == 0)
					|| (var.getValue().compareTo("requestCounter") == 0)
					|| (var.getValue().compareTo("currentElements") == 0))
				RESULT = "getVarViewValue(\"" + var.getValue() + "\"" + param + ")"; 	

			CUP$TagProcessParser$result = new java_cup.runtime.Symbol(16/*detgetcharac*/, ((java_cup.runtime.Symbol)CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-0)).right, RESULT);
		}
		return CUP$TagProcessParser$result;

		/*. . . . . . . . . . . . . . . . . . . .*/
		case 42: // detgetcharac ::= ID 
		{
			String RESULT = null;
			RESULT = "getId()"; 
			CUP$TagProcessParser$result = new java_cup.runtime.Symbol(16/*detgetcharac*/, ((java_cup.runtime.Symbol)CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-0)).right, RESULT);
		}
		return CUP$TagProcessParser$result;

		/*. . . . . . . . . . . . . . . . . . . .*/
		case 41: // detgetcharac ::= VALUE 
		{
			String RESULT = null;
			SymbolValue var = (SymbolValue)((java_cup.runtime.Symbol) CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-0)).value;
			RESULT = "getVar(\"" + var.getValue() + "\").getValue().doubleValue()"; 
			CUP$TagProcessParser$result = new java_cup.runtime.Symbol(16/*detgetcharac*/, ((java_cup.runtime.Symbol)CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-0)).right, RESULT);
		}
		return CUP$TagProcessParser$result;

		/*. . . . . . . . . . . . . . . . . . . .*/
		case 40: // etgetcharac ::= VARVIEW getparams 
		{
			String RESULT = null;
			SymbolValue var = (SymbolValue)((java_cup.runtime.Symbol) CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-1)).value;
			String param = (String)((java_cup.runtime.Symbol) CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-0)).value;

			if ((var.getValue().compareTo("executionTime") == 0) || (var.getValue().compareTo("waitTime") == 0)
					|| (var.getValue().compareTo("executionCounter") == 0)
					|| (var.getValue().compareTo("requestCounter") == 0)
					|| (var.getValue().compareTo("currentElements") == 0))
				RESULT = "getVarViewValue(\"" + var.getValue() + "\"" + param + ")"; 	

			CUP$TagProcessParser$result = new java_cup.runtime.Symbol(15/*etgetcharac*/, ((java_cup.runtime.Symbol)CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-0)).right, RESULT);
		}
		return CUP$TagProcessParser$result;

		/*. . . . . . . . . . . . . . . . . . . .*/
		case 39: // etgetcharac ::= ID 
		{
			String RESULT = null;
			RESULT = "getId()"; 
			CUP$TagProcessParser$result = new java_cup.runtime.Symbol(15/*etgetcharac*/, ((java_cup.runtime.Symbol)CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-0)).right, RESULT);
		}
		return CUP$TagProcessParser$result;

		/*. . . . . . . . . . . . . . . . . . . .*/
		case 38: // etgetcharac ::= VALUE 
		{
			String RESULT = null;
			SymbolValue var = (SymbolValue)((java_cup.runtime.Symbol) CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-0)).value;
			RESULT = "getVar(\"" + var.getValue() + "\").getValue().doubleValue()"; 
			CUP$TagProcessParser$result = new java_cup.runtime.Symbol(15/*etgetcharac*/, ((java_cup.runtime.Symbol)CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-0)).right, RESULT);
		}
		return CUP$TagProcessParser$result;

		/*. . . . . . . . . . . . . . . . . . . .*/
		case 37: // rgetcharac ::= VARVIEW getparams 
		{
			String RESULT = null;
			SymbolValue var = (SymbolValue)((java_cup.runtime.Symbol) CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-1)).value;
			String param = (String)((java_cup.runtime.Symbol) CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-0)).value;

			if ( (var.getValue().compareTo("createdElements") == 0) 
					|| (var.getValue().compareTo("availabilityTime") == 0) 
					|| (var.getValue().compareTo("cancelTime") == 0)
					|| (var.getValue().compareTo("unavailabilityUse") == 0)	 
					|| (var.getValue().compareTo("executionTime") == 0)	 
					|| (var.getValue().compareTo("cancelUse") == 0)	) 
				RESULT = "getVarViewValue(\"" + var.getValue() + "\"" + param + ")"; 	

			CUP$TagProcessParser$result = new java_cup.runtime.Symbol(14/*rgetcharac*/, ((java_cup.runtime.Symbol)CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-0)).right, RESULT);
		}
		return CUP$TagProcessParser$result;

		/*. . . . . . . . . . . . . . . . . . . .*/
		case 36: // rgetcharac ::= ID 
		{
			String RESULT = null;
			RESULT = "getId()"; 
			CUP$TagProcessParser$result = new java_cup.runtime.Symbol(14/*rgetcharac*/, ((java_cup.runtime.Symbol)CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-0)).right, RESULT);
		}
		return CUP$TagProcessParser$result;

		/*. . . . . . . . . . . . . . . . . . . .*/
		case 35: // rgetcharac ::= VALUE 
		{
			String RESULT = null;
			SymbolValue var = (SymbolValue)((java_cup.runtime.Symbol) CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-0)).value;
			RESULT = "getVar(\"" + var.getValue() + "\").getValue().doubleValue()"; 
			CUP$TagProcessParser$result = new java_cup.runtime.Symbol(14/*rgetcharac*/, ((java_cup.runtime.Symbol)CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-0)).right, RESULT);
		}
		return CUP$TagProcessParser$result;

		/*. . . . . . . . . . . . . . . . . . . .*/
		case 34: // rtgetcharac ::= VARVIEW getparams 
		{
			String RESULT = null;
			SymbolValue var = (SymbolValue)((java_cup.runtime.Symbol) CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-1)).value;
			String param = (String)((java_cup.runtime.Symbol) CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-0)).value;

			if ((var.getValue().compareTo("executionTime") == 0) 
					|| (var.getValue().compareTo("unavailabilityUse") == 0)	 
					|| (var.getValue().compareTo("cancelUse") == 0) )	
				RESULT = "getVarViewValue(\"" + var.getValue() + "\"" + param + ")"; 	

			CUP$TagProcessParser$result = new java_cup.runtime.Symbol(13/*rtgetcharac*/, ((java_cup.runtime.Symbol)CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-0)).right, RESULT);
		}
		return CUP$TagProcessParser$result;

		/*. . . . . . . . . . . . . . . . . . . .*/
		case 33: // rtgetcharac ::= AVAILABLERESOURCES 
		{
			String RESULT = null;
			RESULT = "getAvailableResources()";
			CUP$TagProcessParser$result = new java_cup.runtime.Symbol(13/*rtgetcharac*/, ((java_cup.runtime.Symbol)CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-0)).right, RESULT);
		}
		return CUP$TagProcessParser$result;

		/*. . . . . . . . . . . . . . . . . . . .*/
		case 32: // rtgetcharac ::= ID 
		{
			String RESULT = null;
			RESULT = "getId()"; 
			CUP$TagProcessParser$result = new java_cup.runtime.Symbol(13/*rtgetcharac*/, ((java_cup.runtime.Symbol)CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-0)).right, RESULT);
		}
		return CUP$TagProcessParser$result;

		/*. . . . . . . . . . . . . . . . . . . .*/
		case 31: // rtgetcharac ::= VALUE 
		{
			String RESULT = null;
			SymbolValue var = (SymbolValue)((java_cup.runtime.Symbol) CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-0)).value;
			RESULT = "getVar(\"" + var.getValue() + "\").getValue().doubleValue()"; 
			CUP$TagProcessParser$result = new java_cup.runtime.Symbol(13/*rtgetcharac*/, ((java_cup.runtime.Symbol)CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-0)).right, RESULT);
		}
		return CUP$TagProcessParser$result;

		/*. . . . . . . . . . . . . . . . . . . .*/
		case 30: // simulgetcharac ::= VARVIEW getparams 
		{
			String RESULT = null;
			SymbolValue var = (SymbolValue)((java_cup.runtime.Symbol) CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-1)).value;
			String param = (String)((java_cup.runtime.Symbol) CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-0)).value;

			if (var.getValue().compareTo("createdElements") == 0) 
				RESULT = "getVarViewValue(\"" + var.getValue() + "\"" + param + ")"; 	

			CUP$TagProcessParser$result = new java_cup.runtime.Symbol(12/*simulgetcharac*/, ((java_cup.runtime.Symbol)CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-0)).right, RESULT);
		}
		return CUP$TagProcessParser$result;

		/*. . . . . . . . . . . . . . . . . . . .*/
		case 29: // simulgetcharac ::= ACTIVEELEMENTS 
		{
			String RESULT = null;
			RESULT = "getActiveElementList().size()"; 
			CUP$TagProcessParser$result = new java_cup.runtime.Symbol(12/*simulgetcharac*/, ((java_cup.runtime.Symbol)CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-0)).right, RESULT);
		}
		return CUP$TagProcessParser$result;

		/*. . . . . . . . . . . . . . . . . . . .*/
		case 28: // simulgetcharac ::= ID 
		{
			String RESULT = null;
			RESULT = "getId()"; 
			CUP$TagProcessParser$result = new java_cup.runtime.Symbol(12/*simulgetcharac*/, ((java_cup.runtime.Symbol)CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-0)).right, RESULT);
		}
		return CUP$TagProcessParser$result;

		/*. . . . . . . . . . . . . . . . . . . .*/
		case 27: // simulgetcharac ::= FINALSIMULATIONTIME 
		{
			String RESULT = null;
			RESULT = "getEndTs()"; 
			CUP$TagProcessParser$result = new java_cup.runtime.Symbol(12/*simulgetcharac*/, ((java_cup.runtime.Symbol)CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-0)).right, RESULT);
		}
		return CUP$TagProcessParser$result;

		/*. . . . . . . . . . . . . . . . . . . .*/
		case 26: // simulgetcharac ::= INITIALSIMULATIONTIME 
		{
			String RESULT = null;
			RESULT = "getStartTs()"; 
			CUP$TagProcessParser$result = new java_cup.runtime.Symbol(12/*simulgetcharac*/, ((java_cup.runtime.Symbol)CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-0)).right, RESULT);
		}
		return CUP$TagProcessParser$result;

		/*. . . . . . . . . . . . . . . . . . . .*/
		case 25: // simulgetcharac ::= TOTALELEMENTTYPES 
		{
			String RESULT = null;
			RESULT = "getElementTypeList().size()"; 
			CUP$TagProcessParser$result = new java_cup.runtime.Symbol(12/*simulgetcharac*/, ((java_cup.runtime.Symbol)CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-0)).right, RESULT);
		}
		return CUP$TagProcessParser$result;

		/*. . . . . . . . . . . . . . . . . . . .*/
		case 24: // simulgetcharac ::= TOTALWORKGROUPS 
		{
			String RESULT = null;
			RESULT = "getWorkGroupList().size()"; 
			CUP$TagProcessParser$result = new java_cup.runtime.Symbol(12/*simulgetcharac*/, ((java_cup.runtime.Symbol)CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-0)).right, RESULT);
		}
		return CUP$TagProcessParser$result;

		/*. . . . . . . . . . . . . . . . . . . .*/
		case 23: // simulgetcharac ::= TOTALRESOURCES 
		{
			String RESULT = null;
			RESULT = "getResourceList().size()"; 
			CUP$TagProcessParser$result = new java_cup.runtime.Symbol(12/*simulgetcharac*/, ((java_cup.runtime.Symbol)CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-0)).right, RESULT);
		}
		return CUP$TagProcessParser$result;

		/*. . . . . . . . . . . . . . . . . . . .*/
		case 22: // simulgetcharac ::= TOTALRESOURCETYPES 
		{
			String RESULT = null;
			RESULT = "getResourceTypeList().size()"; 
			CUP$TagProcessParser$result = new java_cup.runtime.Symbol(12/*simulgetcharac*/, ((java_cup.runtime.Symbol)CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-0)).right, RESULT);
		}
		return CUP$TagProcessParser$result;

		/*. . . . . . . . . . . . . . . . . . . .*/
		case 21: // simulgetcharac ::= TOTALACTIVITIES 
		{
			String RESULT = null;
			RESULT = "getActivityList().size()"; 
			CUP$TagProcessParser$result = new java_cup.runtime.Symbol(12/*simulgetcharac*/, ((java_cup.runtime.Symbol)CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-0)).right, RESULT);
		}
		return CUP$TagProcessParser$result;

		/*. . . . . . . . . . . . . . . . . . . .*/
		case 20: // simulgetcharac ::= VALUE 
		{
			String RESULT = null;
			SymbolValue var = (SymbolValue)((java_cup.runtime.Symbol) CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-0)).value;
			RESULT = "getVar(\"" + var.getValue() + "\").getValue().doubleValue()"; 
			CUP$TagProcessParser$result = new java_cup.runtime.Symbol(12/*simulgetcharac*/, ((java_cup.runtime.Symbol)CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-0)).right, RESULT);
		}
		return CUP$TagProcessParser$result;

		/*. . . . . . . . . . . . . . . . . . . .*/
		case 19: // actgetcharac ::= VARVIEW getparams 
		{
			String RESULT = null;
			SymbolValue var = (SymbolValue)((java_cup.runtime.Symbol) CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-1)).value;
			String param = (String)((java_cup.runtime.Symbol) CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-0)).value;

			if ((var.getValue().compareTo("executionTime") == 0) || (var.getValue().compareTo("waitTime") == 0)
					|| (var.getValue().compareTo("executionCounter") == 0)) 
				RESULT = "getVarViewValue(\"" + var.getValue() + "\"" + param + ")"; 	

			CUP$TagProcessParser$result = new java_cup.runtime.Symbol(11/*actgetcharac*/, ((java_cup.runtime.Symbol)CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-0)).right, RESULT);
		}
		return CUP$TagProcessParser$result;

		/*. . . . . . . . . . . . . . . . . . . .*/
		case 18: // actgetcharac ::= QUEUESIZE 
		{
			String RESULT = null;
			RESULT = "getQueueSize()"; 
			CUP$TagProcessParser$result = new java_cup.runtime.Symbol(11/*actgetcharac*/, ((java_cup.runtime.Symbol)CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-0)).right, RESULT);
		}
		return CUP$TagProcessParser$result;

		/*. . . . . . . . . . . . . . . . . . . .*/
		case 17: // actgetcharac ::= LASTFINISH 
		{
			String RESULT = null;
			RESULT = "getLastFinishTs()"; 
			CUP$TagProcessParser$result = new java_cup.runtime.Symbol(11/*actgetcharac*/, ((java_cup.runtime.Symbol)CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-0)).right, RESULT);
		}
		return CUP$TagProcessParser$result;

		/*. . . . . . . . . . . . . . . . . . . .*/
		case 16: // actgetcharac ::= LASTSTART 
		{
			String RESULT = null;
			RESULT = "getLastStartTs()"; 
			CUP$TagProcessParser$result = new java_cup.runtime.Symbol(11/*actgetcharac*/, ((java_cup.runtime.Symbol)CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-0)).right, RESULT);
		}
		return CUP$TagProcessParser$result;

		/*. . . . . . . . . . . . . . . . . . . .*/
		case 15: // actgetcharac ::= ID 
		{
			String RESULT = null;
			RESULT = "getId()"; 
			CUP$TagProcessParser$result = new java_cup.runtime.Symbol(11/*actgetcharac*/, ((java_cup.runtime.Symbol)CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-0)).right, RESULT);
		}
		return CUP$TagProcessParser$result;

		/*. . . . . . . . . . . . . . . . . . . .*/
		case 14: // actgetcharac ::= VALUE 
		{
			String RESULT = null;
			SymbolValue var = (SymbolValue)((java_cup.runtime.Symbol) CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-0)).value;
			RESULT = "getVar(\"" + var.getValue() + "\").getValue().doubleValue()"; 
			CUP$TagProcessParser$result = new java_cup.runtime.Symbol(11/*actgetcharac*/, ((java_cup.runtime.Symbol)CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-0)).right, RESULT);
		}
		return CUP$TagProcessParser$result;

		/*. . . . . . . . . . . . . . . . . . . .*/
		case 13: // getid ::= DINELEM degetcharac 
		{
			String RESULT = null;
			SymbolValue id = (SymbolValue)((java_cup.runtime.Symbol) CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-1)).value;
			String ch = (String)((java_cup.runtime.Symbol) CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-0)).value;

			if ((id.getContext().compareTo("logicExp") == 0) ||
					(id.getContext().compareTo("beforeRequest") == 0) ||
					(id.getContext().compareTo("inqueue") == 0) ||
					(id.getContext().compareTo("afterStart") == 0) ||
					(id.getContext().compareTo("afterFinalize") == 0))
				RESULT = "e." + ch;
			else {
				reportError("The event " + id.getContext() + " can't access to an Element object."); 
				RESULT = "";
			}

			CUP$TagProcessParser$result = new java_cup.runtime.Symbol(6/*getid*/, ((java_cup.runtime.Symbol)CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-0)).right, RESULT);
		}
		return CUP$TagProcessParser$result;

		/*. . . . . . . . . . . . . . . . . . . .*/
		case 12: // getid ::= DINELEMTYPE detgetcharac 
		{
			String RESULT = null;
			SymbolValue id = (SymbolValue)((java_cup.runtime.Symbol) CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-1)).value;
			String ch = (String)((java_cup.runtime.Symbol) CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-0)).value;

			if ((id.getContext().compareTo("logicExp") == 0) ||
					(id.getContext().compareTo("beforeRequest") == 0) ||
					(id.getContext().compareTo("inqueue") == 0) ||
					(id.getContext().compareTo("afterStart") == 0) ||
					(id.getContext().compareTo("afterFinalize") == 0))
				RESULT = "((Element)e).getElementType()." + ch;
			else {
				reportError("The event " + id.getContext() + " can't access to an ElementType object."); 
				RESULT = "";
			}

			CUP$TagProcessParser$result = new java_cup.runtime.Symbol(6/*getid*/, ((java_cup.runtime.Symbol)CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-0)).right, RESULT);
		}
		return CUP$TagProcessParser$result;

		/*. . . . . . . . . . . . . . . . . . . .*/
		case 11: // getid ::= ELEMTYPE etgetcharac 
		{
			String RESULT = null;
			SymbolValue id = (SymbolValue)((java_cup.runtime.Symbol) CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-1)).value;
			String ch = (String)((java_cup.runtime.Symbol) CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-0)).value;

			int pos = id.getValue().indexOf(".");
			String number = id.getValue().substring(2,pos);
			RESULT = "simul.getElementType(" + number + ")." + ch; 

			CUP$TagProcessParser$result = new java_cup.runtime.Symbol(6/*getid*/, ((java_cup.runtime.Symbol)CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-0)).right, RESULT);
		}
		return CUP$TagProcessParser$result;

		/*. . . . . . . . . . . . . . . . . . . .*/
		case 10: // getid ::= RES rgetcharac 
		{
			String RESULT = null;
			SymbolValue id = (SymbolValue)((java_cup.runtime.Symbol) CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-1)).value;
			String ch = (String)((java_cup.runtime.Symbol) CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-0)).value;

			int pos = id.getValue().indexOf(".");
			String number = id.getValue().substring(1,pos);
			RESULT = "simul.getResourceList().get(" + number + ")." + ch; 

			CUP$TagProcessParser$result = new java_cup.runtime.Symbol(6/*getid*/, ((java_cup.runtime.Symbol)CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-0)).right, RESULT);
		}
		return CUP$TagProcessParser$result;

		/*. . . . . . . . . . . . . . . . . . . .*/
		case 9: // getid ::= RESTYPE rtgetcharac 
		{
			String RESULT = null;
			SymbolValue id = (SymbolValue)((java_cup.runtime.Symbol) CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-1)).value;
			String ch = (String)((java_cup.runtime.Symbol) CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-0)).value;

			int pos = id.getValue().indexOf(".");
			String number = id.getValue().substring(2,pos);
			RESULT = "simul.getResourceType(" + number + ")." + ch; 

			CUP$TagProcessParser$result = new java_cup.runtime.Symbol(6/*getid*/, ((java_cup.runtime.Symbol)CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-0)).right, RESULT);
		}
		return CUP$TagProcessParser$result;

		/*. . . . . . . . . . . . . . . . . . . .*/
		case 8: // getid ::= SIMUL simulgetcharac 
		{
			String RESULT = null;
			String ch = (String)((java_cup.runtime.Symbol) CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-0)).value;

			RESULT = "simul." + ch; 

			CUP$TagProcessParser$result = new java_cup.runtime.Symbol(6/*getid*/, ((java_cup.runtime.Symbol)CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-0)).right, RESULT);
		}
		return CUP$TagProcessParser$result;

		/*. . . . . . . . . . . . . . . . . . . .*/
		case 7: // getid ::= ACT actgetcharac 
		{
			String RESULT = null;
			SymbolValue id = (SymbolValue)((java_cup.runtime.Symbol) CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-1)).value;
			String ch = (String)((java_cup.runtime.Symbol) CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-0)).value;

			int pos = id.getValue().indexOf(".");
			String number = id.getValue().substring(1,pos);
			RESULT = "simul.getActivity(" + number + ")." + ch; 

			CUP$TagProcessParser$result = new java_cup.runtime.Symbol(6/*getid*/, ((java_cup.runtime.Symbol)CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-0)).right, RESULT);
		}
		return CUP$TagProcessParser$result;

		/*. . . . . . . . . . . . . . . . . . . .*/
		case 6: // gettagexp ::= GETTAG LPAREN getid RPAREN ENDTAG 
		{
			String RESULT = null;
			String getcode = (String)((java_cup.runtime.Symbol) CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-2)).value;
			RESULT = getcode; 
			CUP$TagProcessParser$result = new java_cup.runtime.Symbol(4/*gettagexp*/, ((java_cup.runtime.Symbol)CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-0)).right, RESULT);
		}
		return CUP$TagProcessParser$result;

		/*. . . . . . . . . . . . . . . . . . . .*/
		case 5: // tag ::= settagexp 
		{
			String RESULT = null;
			String exp = (String)((java_cup.runtime.Symbol) CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-0)).value;
			RESULT = exp; 
			CUP$TagProcessParser$result = new java_cup.runtime.Symbol(3/*tag*/, ((java_cup.runtime.Symbol)CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-0)).right, RESULT);
		}
		return CUP$TagProcessParser$result;

		/*. . . . . . . . . . . . . . . . . . . .*/
		case 4: // tag ::= gettagexp 
		{
			String RESULT = null;
			String exp = (String)((java_cup.runtime.Symbol) CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-0)).value;
			RESULT = exp; 
			CUP$TagProcessParser$result = new java_cup.runtime.Symbol(3/*tag*/, ((java_cup.runtime.Symbol)CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-0)).right, RESULT);
		}
		return CUP$TagProcessParser$result;

		/*. . . . . . . . . . . . . . . . . . . .*/
		case 3: // source ::= CODE source 
		{
			String RESULT = null;
			SymbolValue c = (SymbolValue)((java_cup.runtime.Symbol) CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-1)).value;
			String src = (String)((java_cup.runtime.Symbol) CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-0)).value;
			RESULT = c.getValue() + src; 
			CUP$TagProcessParser$result = new java_cup.runtime.Symbol(1/*source*/, ((java_cup.runtime.Symbol)CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-0)).right, RESULT);
		}
		return CUP$TagProcessParser$result;

		/*. . . . . . . . . . . . . . . . . . . .*/
		case 2: // source ::= STARTTAG tag source 
		{
			String RESULT = null;
			String tg = (String)((java_cup.runtime.Symbol) CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-1)).value;
			String src = (String)((java_cup.runtime.Symbol) CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-0)).value;
			RESULT = tg + src; 
			CUP$TagProcessParser$result = new java_cup.runtime.Symbol(1/*source*/, ((java_cup.runtime.Symbol)CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-0)).right, RESULT);
		}
		return CUP$TagProcessParser$result;

		/*. . . . . . . . . . . . . . . . . . . .*/
		case 1: // $START ::= source EOF 
		{
			Object RESULT = null;
			String start_val = (String)((java_cup.runtime.Symbol) CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-1)).value;
			RESULT = start_val;
			CUP$TagProcessParser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-0)).right, RESULT);
		}
		/* ACCEPT */
		CUP$TagProcessParser$parser.done_parsing();
		return CUP$TagProcessParser$result;

		/*. . . . . . . . . . . . . . . . . . . .*/
		case 0: // source ::= 
		{
			String RESULT = null;
			RESULT = ""; 
			CUP$TagProcessParser$result = new java_cup.runtime.Symbol(1/*source*/, ((java_cup.runtime.Symbol)CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$TagProcessParser$stack.elementAt(CUP$TagProcessParser$top-0)).right, RESULT);
		}
		return CUP$TagProcessParser$result;

		/* . . . . . .*/
		default:
			throw new Exception(
					"Invalid action number found in internal parse table");

		}
	}
}


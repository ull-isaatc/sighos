/* The following code was generated by JFlex 1.4.1 on 5/08/08 16:22 */

/**
 * This class is a simple example lexer.
 */

package es.ull.iis.simulation.factory;
 
import java_cup.runtime.Symbol;
 

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 5/08/08 16:22 from the specification file
 * <tt>C:/Documents and Settings/ycallero/workspace/SimulatorWF-Adaption/src/es/ull/isaatc/simulation/factory/TagProcessLexer.flex</tt>
 */
public class TagProcessLexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\56\1\52\1\51\1\0\1\52\1\50\16\56\4\0\1\52\3\0"+
    "\1\56\1\54\2\0\1\57\1\60\1\47\1\0\1\61\1\0\1\3"+
    "\1\46\12\2\2\0\1\53\1\0\1\55\1\0\1\13\1\1\1\56"+
    "\1\44\1\56\1\11\1\35\1\30\12\56\1\5\1\4\1\6\1\45"+
    "\1\56\1\26\3\56\4\0\1\56\1\0\1\15\1\41\1\17\1\34"+
    "\1\12\1\33\1\56\1\36\1\20\1\56\1\27\1\16\1\31\1\32"+
    "\1\14\1\25\1\37\1\7\1\22\1\10\1\23\1\21\1\43\1\42"+
    "\1\24\1\40\4\0\41\56\2\0\4\56\4\0\1\56\2\0\1\56"+
    "\7\0\1\56\4\0\1\56\5\0\27\56\1\0\37\56\1\0\u013f\56"+
    "\31\0\162\56\4\0\14\56\16\0\5\56\11\0\1\56\21\0\130\56"+
    "\5\0\23\56\12\0\1\56\13\0\1\56\1\0\3\56\1\0\1\56"+
    "\1\0\24\56\1\0\54\56\1\0\46\56\1\0\5\56\4\0\202\56"+
    "\1\0\4\56\3\0\105\56\1\0\46\56\2\0\2\56\6\0\20\56"+
    "\41\0\46\56\2\0\1\56\7\0\47\56\11\0\21\56\1\0\27\56"+
    "\1\0\3\56\1\0\1\56\1\0\2\56\1\0\1\56\13\0\33\56"+
    "\5\0\3\56\15\0\4\56\14\0\6\56\13\0\32\56\5\0\31\56"+
    "\7\0\12\56\4\0\146\56\1\0\11\56\1\0\12\56\1\0\23\56"+
    "\2\0\1\56\17\0\74\56\2\0\3\56\60\0\62\56\u014f\0\71\56"+
    "\2\0\22\56\2\0\5\56\3\0\14\56\2\0\12\56\21\0\3\56"+
    "\1\0\10\56\2\0\2\56\2\0\26\56\1\0\7\56\1\0\1\56"+
    "\3\0\4\56\2\0\11\56\2\0\2\56\2\0\3\56\11\0\1\56"+
    "\4\0\2\56\1\0\5\56\2\0\16\56\15\0\3\56\1\0\6\56"+
    "\4\0\2\56\2\0\26\56\1\0\7\56\1\0\2\56\1\0\2\56"+
    "\1\0\2\56\2\0\1\56\1\0\5\56\4\0\2\56\2\0\3\56"+
    "\13\0\4\56\1\0\1\56\7\0\17\56\14\0\3\56\1\0\11\56"+
    "\1\0\3\56\1\0\26\56\1\0\7\56\1\0\2\56\1\0\5\56"+
    "\2\0\12\56\1\0\3\56\1\0\3\56\2\0\1\56\17\0\4\56"+
    "\2\0\12\56\1\0\1\56\17\0\3\56\1\0\10\56\2\0\2\56"+
    "\2\0\26\56\1\0\7\56\1\0\2\56\1\0\5\56\2\0\10\56"+
    "\3\0\2\56\2\0\3\56\10\0\2\56\4\0\2\56\1\0\3\56"+
    "\4\0\12\56\1\0\1\56\20\0\2\56\1\0\6\56\3\0\3\56"+
    "\1\0\4\56\3\0\2\56\1\0\1\56\1\0\2\56\3\0\2\56"+
    "\3\0\3\56\3\0\10\56\1\0\3\56\4\0\5\56\3\0\3\56"+
    "\1\0\4\56\11\0\1\56\17\0\11\56\11\0\1\56\7\0\3\56"+
    "\1\0\10\56\1\0\3\56\1\0\27\56\1\0\12\56\1\0\5\56"+
    "\4\0\7\56\1\0\3\56\1\0\4\56\7\0\2\56\11\0\2\56"+
    "\4\0\12\56\22\0\2\56\1\0\10\56\1\0\3\56\1\0\27\56"+
    "\1\0\12\56\1\0\5\56\2\0\11\56\1\0\3\56\1\0\4\56"+
    "\7\0\2\56\7\0\1\56\1\0\2\56\4\0\12\56\22\0\2\56"+
    "\1\0\10\56\1\0\3\56\1\0\27\56\1\0\20\56\4\0\6\56"+
    "\2\0\3\56\1\0\4\56\11\0\1\56\10\0\2\56\4\0\12\56"+
    "\22\0\2\56\1\0\22\56\3\0\30\56\1\0\11\56\1\0\1\56"+
    "\2\0\7\56\3\0\1\56\4\0\6\56\1\0\1\56\1\0\10\56"+
    "\22\0\2\56\15\0\72\56\4\0\20\56\1\0\12\56\47\0\2\56"+
    "\1\0\1\56\2\0\2\56\1\0\1\56\2\0\1\56\6\0\4\56"+
    "\1\0\7\56\1\0\3\56\1\0\1\56\1\0\1\56\2\0\2\56"+
    "\1\0\15\56\1\0\3\56\2\0\5\56\1\0\1\56\1\0\6\56"+
    "\2\0\12\56\2\0\2\56\42\0\1\56\27\0\2\56\6\0\12\56"+
    "\13\0\1\56\1\0\1\56\1\0\1\56\4\0\12\56\1\0\42\56"+
    "\6\0\24\56\1\0\6\56\4\0\10\56\1\0\44\56\11\0\1\56"+
    "\71\0\42\56\1\0\5\56\1\0\2\56\1\0\7\56\3\0\4\56"+
    "\6\0\12\56\6\0\12\56\106\0\46\56\12\0\51\56\7\0\132\56"+
    "\5\0\104\56\5\0\122\56\6\0\7\56\1\0\77\56\1\0\1\56"+
    "\1\0\4\56\2\0\7\56\1\0\1\56\1\0\4\56\2\0\47\56"+
    "\1\0\1\56\1\0\4\56\2\0\37\56\1\0\1\56\1\0\4\56"+
    "\2\0\7\56\1\0\1\56\1\0\4\56\2\0\7\56\1\0\7\56"+
    "\1\0\27\56\1\0\37\56\1\0\1\56\1\0\4\56\2\0\7\56"+
    "\1\0\47\56\1\0\23\56\16\0\11\56\56\0\125\56\14\0\u026c\56"+
    "\2\0\10\56\12\0\32\56\5\0\113\56\3\0\3\56\17\0\15\56"+
    "\1\0\7\56\13\0\25\56\13\0\24\56\14\0\15\56\1\0\3\56"+
    "\1\0\2\56\14\0\124\56\3\0\1\56\3\0\3\56\2\0\12\56"+
    "\41\0\3\56\2\0\12\56\6\0\130\56\10\0\52\56\126\0\35\56"+
    "\3\0\14\56\4\0\14\56\12\0\50\56\2\0\5\56\u038b\0\154\56"+
    "\224\0\234\56\4\0\132\56\6\0\26\56\2\0\6\56\2\0\46\56"+
    "\2\0\6\56\2\0\10\56\1\0\1\56\1\0\1\56\1\0\1\56"+
    "\1\0\37\56\2\0\65\56\1\0\7\56\1\0\1\56\3\0\3\56"+
    "\1\0\7\56\3\0\4\56\2\0\6\56\4\0\15\56\5\0\3\56"+
    "\1\0\7\56\17\0\4\56\32\0\5\56\20\0\2\56\23\0\1\56"+
    "\13\0\4\56\6\0\6\56\1\0\1\56\15\0\1\56\40\0\22\56"+
    "\36\0\15\56\4\0\1\56\3\0\6\56\27\0\1\56\4\0\1\56"+
    "\2\0\12\56\1\0\1\56\3\0\5\56\6\0\1\56\1\0\1\56"+
    "\1\0\1\56\1\0\4\56\1\0\3\56\1\0\7\56\3\0\3\56"+
    "\5\0\5\56\26\0\44\56\u0e81\0\3\56\31\0\17\56\1\0\5\56"+
    "\2\0\5\56\4\0\126\56\2\0\2\56\2\0\3\56\1\0\137\56"+
    "\5\0\50\56\4\0\136\56\21\0\30\56\70\0\20\56\u0200\0\u19b6\56"+
    "\112\0\u51a6\56\132\0\u048d\56\u0773\0\u2ba4\56\u215c\0\u012e\56\2\0\73\56"+
    "\225\0\7\56\14\0\5\56\5\0\14\56\1\0\15\56\1\0\5\56"+
    "\1\0\1\56\1\0\2\56\1\0\2\56\1\0\154\56\41\0\u016b\56"+
    "\22\0\100\56\2\0\66\56\50\0\15\56\3\0\20\56\20\0\4\56"+
    "\17\0\2\56\30\0\3\56\31\0\1\56\6\0\5\56\1\0\207\56"+
    "\2\0\1\56\4\0\1\56\13\0\12\56\7\0\32\56\4\0\1\56"+
    "\1\0\32\56\12\0\132\56\3\0\6\56\2\0\6\56\2\0\6\56"+
    "\2\0\3\56\3\0\2\56\3\0\2\56\22\0\3\56\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\2\2\1\1\3\1\4\5\1\1\2\4\1"+
    "\1\4\5\1\1\2\2\5\2\2\1\6\1\7\1\10"+
    "\1\11\1\12\1\1\1\13\5\1\2\14\7\1\1\15"+
    "\5\1\2\0\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\2\1\1\24\1\1\1\25\1\26\10\1\1\27\3\1"+
    "\2\30\3\0\1\31\2\1\1\32\1\1\1\33\13\1"+
    "\1\0\1\30\1\0\17\1\1\34\65\1\1\35\11\1"+
    "\1\36\2\1\1\37\3\1\1\40\10\1\1\41\50\1"+
    "\1\42\2\1\1\43\5\1\1\44\2\1\1\45\11\1"+
    "\1\46\3\1\1\47\1\50\3\1\1\51\1\1\1\52";

  private static int [] zzUnpackAction() {
    int [] result = new int[275];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\62\0\144\0\226\0\62\0\310\0\372\0\u012c"+
    "\0\u015e\0\u0190\0\u01c2\0\u01f4\0\u0226\0\u0258\0\u028a\0\u02bc"+
    "\0\u02ee\0\u0320\0\u0352\0\u0384\0\u03b6\0\u03e8\0\u041a\0\u044c"+
    "\0\62\0\u047e\0\u04b0\0\62\0\62\0\62\0\u04e2\0\62"+
    "\0\u0514\0\u0546\0\u0578\0\u05aa\0\u05dc\0\u060e\0\u0640\0\u0672"+
    "\0\u06a4\0\u06d6\0\u0708\0\u073a\0\u076c\0\u079e\0\u07d0\0\u0802"+
    "\0\226\0\u0834\0\u0866\0\u0898\0\u08ca\0\u08fc\0\u092e\0\u0960"+
    "\0\62\0\62\0\u0992\0\226\0\62\0\u09c4\0\u09f6\0\u0a28"+
    "\0\u0a5a\0\u0a8c\0\62\0\u0abe\0\u0af0\0\u0b22\0\u0b54\0\u0b86"+
    "\0\u0bb8\0\u0bea\0\u0c1c\0\u0c4e\0\226\0\u0c80\0\u0cb2\0\u0ce4"+
    "\0\u0d16\0\62\0\u0d48\0\u0d7a\0\u0dac\0\62\0\u0dde\0\u0e10"+
    "\0\62\0\u0e42\0\62\0\u0e74\0\u0ea6\0\u0ed8\0\u0f0a\0\u0f3c"+
    "\0\u0f6e\0\u0fa0\0\u0fd2\0\u1004\0\u1036\0\u1068\0\u109a\0\u0d48"+
    "\0\u10cc\0\u10fe\0\u1130\0\u1162\0\u1194\0\u11c6\0\u11f8\0\u122a"+
    "\0\u125c\0\u128e\0\u12c0\0\u12f2\0\u1324\0\u1356\0\u1388\0\u13ba"+
    "\0\u10cc\0\u13ec\0\u141e\0\u1450\0\u1482\0\u14b4\0\u14e6\0\u1518"+
    "\0\u154a\0\u157c\0\u15ae\0\u15e0\0\u1612\0\u1644\0\u1676\0\u16a8"+
    "\0\u16da\0\u170c\0\u173e\0\u1770\0\u17a2\0\u17d4\0\u1806\0\u1838"+
    "\0\u186a\0\u189c\0\u18ce\0\u1900\0\u1932\0\u1964\0\u1996\0\u19c8"+
    "\0\u19fa\0\u1a2c\0\u1a5e\0\u1a90\0\u1ac2\0\u1af4\0\u1b26\0\u1b58"+
    "\0\u1b8a\0\u1bbc\0\u1bee\0\u1c20\0\u1c52\0\u1c84\0\u1cb6\0\u1ce8"+
    "\0\u1d1a\0\u1d4c\0\u1d7e\0\u1db0\0\u1de2\0\u1e14\0\226\0\u1e46"+
    "\0\u1e78\0\u1eaa\0\u1edc\0\u1f0e\0\u1f40\0\u1f72\0\u1fa4\0\u1fd6"+
    "\0\226\0\u2008\0\u203a\0\226\0\u206c\0\u209e\0\u20d0\0\226"+
    "\0\u2102\0\u2134\0\u2166\0\u2198\0\u21ca\0\u21fc\0\u222e\0\u2260"+
    "\0\226\0\u2292\0\u22c4\0\u22f6\0\u2328\0\u235a\0\u238c\0\u23be"+
    "\0\u23f0\0\u2422\0\u2454\0\u2486\0\u24b8\0\u24ea\0\u251c\0\u254e"+
    "\0\u2580\0\u25b2\0\u25e4\0\u2616\0\u2648\0\u267a\0\u26ac\0\u26de"+
    "\0\u2710\0\u2742\0\u2774\0\u27a6\0\u27d8\0\u280a\0\u283c\0\u286e"+
    "\0\u28a0\0\u28d2\0\u2904\0\u2936\0\u2968\0\u299a\0\u29cc\0\u29fe"+
    "\0\u2a30\0\226\0\u2a62\0\u2a94\0\226\0\u2ac6\0\u2af8\0\u2b2a"+
    "\0\u2b5c\0\u2b8e\0\226\0\u2bc0\0\u2bf2\0\226\0\u2c24\0\u2c56"+
    "\0\u2c88\0\u2cba\0\u2cec\0\u2d1e\0\u2d50\0\u2d82\0\u2db4\0\226"+
    "\0\u2de6\0\u2e18\0\u2e4a\0\226\0\226\0\u2e7c\0\u2eae\0\u2ee0"+
    "\0\226\0\u2f12\0\226";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[275];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\4\1\10"+
    "\1\11\1\12\1\13\1\14\1\4\1\15\1\16\1\17"+
    "\1\20\1\4\1\21\1\22\4\4\1\23\2\4\1\24"+
    "\3\4\1\25\3\4\1\26\2\4\1\27\1\2\1\30"+
    "\2\31\1\32\1\33\1\2\1\4\1\34\1\35\1\36"+
    "\63\0\1\4\1\37\1\0\7\4\1\0\32\4\10\0"+
    "\1\4\4\0\2\4\1\0\7\4\1\0\32\4\10\0"+
    "\1\4\4\0\2\4\1\40\5\4\1\41\1\4\1\0"+
    "\32\4\10\0\1\4\4\0\1\4\1\42\1\0\2\4"+
    "\1\43\4\4\1\0\32\4\10\0\1\4\4\0\1\4"+
    "\1\42\1\0\4\4\1\43\1\4\1\44\1\0\32\4"+
    "\10\0\1\4\4\0\2\4\1\0\7\4\1\0\1\45"+
    "\31\4\10\0\1\4\4\0\2\4\1\0\2\4\1\46"+
    "\4\4\1\0\32\4\10\0\1\4\4\0\2\4\1\0"+
    "\4\4\1\46\2\4\1\0\26\4\1\47\3\4\10\0"+
    "\1\4\14\0\1\50\1\51\50\0\1\4\1\37\1\0"+
    "\7\4\1\0\3\4\1\52\1\4\1\53\24\4\10\0"+
    "\1\4\4\0\2\4\1\0\7\4\1\0\1\4\1\54"+
    "\30\4\10\0\1\4\4\0\2\4\1\0\3\4\1\55"+
    "\3\4\1\0\1\4\1\56\5\4\1\57\22\4\10\0"+
    "\1\4\4\0\2\4\1\0\7\4\1\0\16\4\1\60"+
    "\1\4\1\61\11\4\10\0\1\4\4\0\2\4\1\40"+
    "\7\4\1\0\32\4\10\0\1\4\4\0\2\4\1\0"+
    "\7\4\1\0\16\4\1\62\13\4\10\0\1\4\4\0"+
    "\2\4\1\0\5\4\1\63\1\4\1\0\32\4\10\0"+
    "\1\4\4\0\2\4\1\0\7\4\1\0\4\4\1\64"+
    "\25\4\10\0\1\4\4\0\2\4\1\0\7\4\1\0"+
    "\7\4\1\65\22\4\10\0\1\4\4\0\2\4\1\0"+
    "\7\4\1\0\1\4\1\66\30\4\10\0\1\4\51\0"+
    "\1\67\1\70\63\0\1\31\64\0\1\71\62\0\1\72"+
    "\5\0\1\4\1\37\1\73\7\4\1\0\32\4\10\0"+
    "\1\4\4\0\2\4\1\0\2\4\1\74\4\4\1\0"+
    "\32\4\10\0\1\4\4\0\1\4\1\42\1\75\7\4"+
    "\1\0\32\4\10\0\1\4\4\0\1\4\1\76\1\0"+
    "\7\4\1\0\32\4\10\0\1\4\4\0\2\4\1\0"+
    "\7\4\1\0\23\4\1\77\6\4\10\0\1\4\4\0"+
    "\2\4\1\0\4\4\1\100\2\4\1\0\32\4\10\0"+
    "\1\4\4\0\1\4\1\101\1\0\7\4\1\0\32\4"+
    "\10\0\1\4\4\0\2\4\1\0\6\4\1\102\1\0"+
    "\32\4\10\0\1\4\6\0\1\103\2\0\1\104\56\0"+
    "\1\103\4\0\1\104\52\0\2\4\1\0\4\4\1\105"+
    "\2\4\1\0\32\4\10\0\1\4\4\0\2\4\1\0"+
    "\7\4\1\0\1\4\1\106\30\4\10\0\1\4\4\0"+
    "\2\4\1\0\7\4\1\0\6\4\1\107\23\4\10\0"+
    "\1\4\4\0\2\4\1\0\6\4\1\110\1\0\32\4"+
    "\10\0\1\4\4\0\2\4\1\0\7\4\1\0\16\4"+
    "\1\111\13\4\10\0\1\4\4\0\2\4\1\0\3\4"+
    "\1\112\3\4\1\0\32\4\10\0\1\4\4\0\2\4"+
    "\1\0\7\4\1\0\4\4\1\113\25\4\10\0\1\4"+
    "\4\0\2\4\1\0\7\4\1\0\1\4\1\114\30\4"+
    "\10\0\1\4\4\0\2\4\1\0\2\4\1\115\4\4"+
    "\1\0\32\4\10\0\1\4\4\0\2\4\1\0\7\4"+
    "\1\0\16\4\1\116\13\4\10\0\1\4\4\0\2\4"+
    "\1\0\6\4\1\117\1\0\32\4\10\0\1\4\4\0"+
    "\2\4\1\0\7\4\1\0\4\4\1\120\25\4\10\0"+
    "\1\4\3\0\50\67\1\121\1\122\10\67\47\123\1\124"+
    "\12\123\26\0\1\125\34\0\1\4\1\76\1\126\7\4"+
    "\1\0\32\4\10\0\1\4\4\0\2\4\1\0\7\4"+
    "\1\0\7\4\1\127\22\4\10\0\1\4\4\0\2\4"+
    "\1\0\7\4\1\0\1\4\1\130\30\4\10\0\1\4"+
    "\4\0\1\4\1\101\1\131\7\4\1\0\32\4\10\0"+
    "\1\4\4\0\2\4\1\0\7\4\1\0\3\4\1\132"+
    "\26\4\10\0\1\4\6\0\1\133\57\0\2\4\1\0"+
    "\7\4\1\0\4\4\1\134\25\4\10\0\1\4\4\0"+
    "\2\4\1\0\7\4\1\0\4\4\1\135\25\4\10\0"+
    "\1\4\4\0\2\4\1\0\4\4\1\136\2\4\1\0"+
    "\32\4\10\0\1\4\4\0\2\4\1\0\7\4\1\0"+
    "\1\4\1\137\30\4\10\0\1\4\4\0\2\4\1\0"+
    "\7\4\1\0\3\4\1\140\26\4\10\0\1\4\4\0"+
    "\2\4\1\0\3\4\1\141\3\4\1\0\32\4\10\0"+
    "\1\4\4\0\2\4\1\0\4\4\1\142\2\4\1\0"+
    "\32\4\10\0\1\4\4\0\2\4\1\0\7\4\1\0"+
    "\5\4\1\143\24\4\10\0\1\4\4\0\2\4\1\0"+
    "\7\4\1\0\1\4\1\144\30\4\10\0\1\4\4\0"+
    "\2\4\1\0\7\4\1\0\7\4\1\145\22\4\10\0"+
    "\1\4\4\0\2\4\1\0\4\4\1\146\2\4\1\0"+
    "\32\4\10\0\1\4\54\0\1\122\10\0\47\123\1\147"+
    "\60\123\1\150\1\147\12\123\30\0\1\151\32\0\2\4"+
    "\1\0\6\4\1\152\1\0\32\4\10\0\1\4\4\0"+
    "\2\4\1\0\7\4\1\0\2\4\1\153\27\4\10\0"+
    "\1\4\4\0\2\4\1\0\7\4\1\0\7\4\1\154"+
    "\22\4\10\0\1\4\4\0\2\4\1\0\7\4\1\0"+
    "\5\4\1\155\24\4\10\0\1\4\4\0\2\4\1\0"+
    "\7\4\1\0\2\4\1\156\27\4\10\0\1\4\4\0"+
    "\2\4\1\0\1\157\6\4\1\0\21\4\1\160\10\4"+
    "\10\0\1\4\4\0\2\4\1\0\4\4\1\161\2\4"+
    "\1\0\32\4\10\0\1\4\4\0\2\4\1\0\6\4"+
    "\1\162\1\0\32\4\10\0\1\4\4\0\2\4\1\0"+
    "\6\4\1\163\1\0\32\4\10\0\1\4\4\0\2\4"+
    "\1\0\7\4\1\0\4\4\1\164\25\4\10\0\1\4"+
    "\4\0\2\4\1\0\7\4\1\0\1\4\1\165\30\4"+
    "\10\0\1\4\4\0\2\4\1\0\7\4\1\0\2\4"+
    "\1\166\27\4\10\0\1\4\4\0\2\4\1\0\6\4"+
    "\1\167\1\0\32\4\10\0\1\4\4\0\2\4\1\0"+
    "\2\4\1\170\4\4\1\0\32\4\10\0\1\4\3\0"+
    "\46\123\1\122\1\147\12\123\2\0\1\171\60\0\2\4"+
    "\1\0\7\4\1\0\6\4\1\172\23\4\10\0\1\4"+
    "\4\0\1\173\1\4\1\0\1\4\1\174\3\4\1\175"+
    "\1\4\1\0\12\4\1\176\17\4\10\0\1\4\4\0"+
    "\2\4\1\0\4\4\1\177\2\4\1\0\32\4\10\0"+
    "\1\4\4\0\2\4\1\0\6\4\1\200\1\0\32\4"+
    "\10\0\1\4\4\0\2\4\1\0\7\4\1\0\1\4"+
    "\1\201\30\4\10\0\1\4\4\0\2\4\1\0\4\4"+
    "\1\202\2\4\1\0\32\4\10\0\1\4\4\0\2\4"+
    "\1\0\7\4\1\0\4\4\1\203\25\4\10\0\1\4"+
    "\4\0\2\4\1\0\6\4\1\204\1\0\32\4\10\0"+
    "\1\4\4\0\2\4\1\0\7\4\1\0\2\4\1\205"+
    "\27\4\10\0\1\4\4\0\2\4\1\0\7\4\1\0"+
    "\16\4\1\206\13\4\10\0\1\4\4\0\2\4\1\0"+
    "\7\4\1\0\1\4\1\207\30\4\10\0\1\4\4\0"+
    "\2\4\1\0\7\4\1\0\4\4\1\210\25\4\10\0"+
    "\1\4\4\0\2\4\1\0\1\211\6\4\1\0\32\4"+
    "\10\0\1\4\4\0\2\4\1\0\1\212\6\4\1\0"+
    "\32\4\10\0\1\4\4\0\2\4\1\0\7\4\1\0"+
    "\4\4\1\213\25\4\10\0\1\4\4\0\2\4\1\0"+
    "\4\4\1\214\2\4\1\0\32\4\10\0\1\4\4\0"+
    "\2\4\1\0\7\4\1\0\3\4\1\215\26\4\10\0"+
    "\1\4\4\0\2\4\1\0\6\4\1\216\1\0\32\4"+
    "\10\0\1\4\4\0\2\4\1\0\7\4\1\0\2\4"+
    "\1\217\27\4\10\0\1\4\4\0\2\4\1\0\7\4"+
    "\1\0\1\220\31\4\10\0\1\4\4\0\2\4\1\0"+
    "\7\4\1\0\4\4\1\221\25\4\10\0\1\4\4\0"+
    "\2\4\1\0\5\4\1\222\1\4\1\0\32\4\10\0"+
    "\1\4\4\0\2\4\1\0\7\4\1\0\25\4\1\223"+
    "\4\4\10\0\1\4\4\0\2\4\1\0\7\4\1\0"+
    "\1\4\1\224\30\4\10\0\1\4\4\0\2\4\1\0"+
    "\7\4\1\0\16\4\1\225\13\4\10\0\1\4\4\0"+
    "\2\4\1\0\7\4\1\0\20\4\1\226\11\4\10\0"+
    "\1\4\4\0\2\4\1\0\2\4\1\170\4\4\1\0"+
    "\31\4\1\227\10\0\1\4\4\0\2\4\1\0\4\4"+
    "\1\230\2\4\1\0\32\4\10\0\1\4\4\0\2\4"+
    "\1\0\7\4\1\0\2\4\1\231\27\4\10\0\1\4"+
    "\4\0\2\4\1\0\7\4\1\0\2\4\1\232\27\4"+
    "\10\0\1\4\4\0\2\4\1\0\7\4\1\0\4\4"+
    "\1\233\25\4\10\0\1\4\4\0\2\4\1\0\7\4"+
    "\1\0\4\4\1\234\25\4\10\0\1\4\4\0\2\4"+
    "\1\0\7\4\1\0\15\4\1\235\14\4\10\0\1\4"+
    "\4\0\2\4\1\0\7\4\1\0\30\4\1\236\1\4"+
    "\10\0\1\4\4\0\2\4\1\0\4\4\1\237\2\4"+
    "\1\0\32\4\10\0\1\4\4\0\2\4\1\0\7\4"+
    "\1\0\6\4\1\240\23\4\10\0\1\4\4\0\2\4"+
    "\1\0\6\4\1\241\1\0\32\4\10\0\1\4\4\0"+
    "\2\4\1\0\3\4\1\242\3\4\1\0\32\4\10\0"+
    "\1\4\4\0\2\4\1\0\7\4\1\0\1\243\31\4"+
    "\10\0\1\4\4\0\2\4\1\0\7\4\1\0\2\4"+
    "\1\244\27\4\10\0\1\4\4\0\2\4\1\0\7\4"+
    "\1\0\2\4\1\245\1\4\1\246\25\4\10\0\1\4"+
    "\4\0\2\4\1\0\3\4\1\247\3\4\1\0\32\4"+
    "\10\0\1\4\4\0\2\4\1\0\7\4\1\0\4\4"+
    "\1\250\25\4\10\0\1\4\4\0\2\4\1\0\5\4"+
    "\1\251\1\4\1\0\32\4\10\0\1\4\4\0\2\4"+
    "\1\0\7\4\1\0\6\4\1\235\23\4\10\0\1\4"+
    "\4\0\2\4\1\0\2\4\1\252\2\4\1\251\1\4"+
    "\1\0\32\4\10\0\1\4\4\0\2\4\1\0\1\253"+
    "\6\4\1\0\32\4\10\0\1\4\4\0\2\4\1\0"+
    "\7\4\1\0\1\4\1\254\30\4\10\0\1\4\4\0"+
    "\2\4\1\0\7\4\1\0\15\4\1\255\14\4\10\0"+
    "\1\4\4\0\2\4\1\0\7\4\1\0\24\4\1\256"+
    "\5\4\10\0\1\4\4\0\2\4\1\0\6\4\1\257"+
    "\1\0\32\4\10\0\1\4\4\0\2\4\1\0\7\4"+
    "\1\0\1\260\31\4\10\0\1\4\4\0\2\4\1\0"+
    "\7\4\1\0\4\4\1\261\25\4\10\0\1\4\4\0"+
    "\2\4\1\0\7\4\1\0\1\262\31\4\10\0\1\4"+
    "\4\0\2\4\1\0\7\4\1\0\15\4\1\263\14\4"+
    "\10\0\1\4\4\0\2\4\1\0\7\4\1\0\13\4"+
    "\1\264\16\4\10\0\1\4\4\0\2\4\1\0\7\4"+
    "\1\0\16\4\1\265\13\4\10\0\1\4\4\0\2\4"+
    "\1\0\6\4\1\266\1\0\32\4\10\0\1\4\4\0"+
    "\2\4\1\0\6\4\1\267\1\0\32\4\10\0\1\4"+
    "\4\0\2\4\1\0\7\4\1\0\2\4\1\270\27\4"+
    "\10\0\1\4\4\0\2\4\1\0\4\4\1\271\2\4"+
    "\1\0\32\4\10\0\1\4\4\0\2\4\1\0\7\4"+
    "\1\0\6\4\1\272\23\4\10\0\1\4\4\0\2\4"+
    "\1\0\7\4\1\0\2\4\1\273\27\4\10\0\1\4"+
    "\4\0\2\4\1\0\7\4\1\0\6\4\1\274\23\4"+
    "\10\0\1\4\4\0\2\4\1\0\7\4\1\0\4\4"+
    "\1\275\25\4\10\0\1\4\4\0\2\4\1\0\7\4"+
    "\1\0\25\4\1\276\4\4\10\0\1\4\4\0\2\4"+
    "\1\0\7\4\1\0\7\4\1\277\22\4\10\0\1\4"+
    "\4\0\2\4\1\0\6\4\1\300\1\0\32\4\10\0"+
    "\1\4\4\0\2\4\1\0\7\4\1\0\7\4\1\301"+
    "\22\4\10\0\1\4\4\0\2\4\1\0\7\4\1\0"+
    "\5\4\1\302\24\4\10\0\1\4\4\0\2\4\1\0"+
    "\7\4\1\0\7\4\1\303\22\4\10\0\1\4\4\0"+
    "\2\4\1\0\6\4\1\304\1\0\32\4\10\0\1\4"+
    "\4\0\2\4\1\0\7\4\1\0\14\4\1\305\15\4"+
    "\10\0\1\4\4\0\2\4\1\0\2\4\1\170\4\4"+
    "\1\0\30\4\1\236\1\4\10\0\1\4\4\0\2\4"+
    "\1\0\7\4\1\0\15\4\1\306\14\4\10\0\1\4"+
    "\4\0\2\4\1\0\1\4\1\307\5\4\1\0\32\4"+
    "\10\0\1\4\4\0\2\4\1\0\7\4\1\0\4\4"+
    "\1\310\25\4\10\0\1\4\4\0\2\4\1\0\7\4"+
    "\1\0\22\4\1\311\7\4\10\0\1\4\4\0\2\4"+
    "\1\0\6\4\1\312\1\0\32\4\10\0\1\4\4\0"+
    "\2\4\1\0\7\4\1\0\15\4\1\313\14\4\10\0"+
    "\1\4\4\0\2\4\1\0\7\4\1\0\4\4\1\314"+
    "\25\4\10\0\1\4\4\0\2\4\1\0\7\4\1\0"+
    "\2\4\1\315\27\4\10\0\1\4\4\0\2\4\1\0"+
    "\7\4\1\0\16\4\1\316\13\4\10\0\1\4\4\0"+
    "\2\4\1\0\7\4\1\0\4\4\1\317\25\4\10\0"+
    "\1\4\4\0\2\4\1\0\3\4\1\320\3\4\1\0"+
    "\32\4\10\0\1\4\4\0\2\4\1\0\7\4\1\0"+
    "\16\4\1\321\13\4\10\0\1\4\4\0\2\4\1\0"+
    "\3\4\1\322\3\4\1\0\32\4\10\0\1\4\4\0"+
    "\2\4\1\0\6\4\1\323\1\0\32\4\10\0\1\4"+
    "\4\0\2\4\1\0\6\4\1\324\1\0\32\4\10\0"+
    "\1\4\4\0\2\4\1\0\4\4\1\325\2\4\1\0"+
    "\32\4\10\0\1\4\4\0\2\4\1\0\7\4\1\0"+
    "\15\4\1\326\14\4\10\0\1\4\4\0\2\4\1\0"+
    "\7\4\1\0\7\4\1\327\22\4\10\0\1\4\4\0"+
    "\2\4\1\0\7\4\1\0\2\4\1\330\27\4\10\0"+
    "\1\4\4\0\2\4\1\0\7\4\1\0\1\4\1\331"+
    "\30\4\10\0\1\4\4\0\2\4\1\0\4\4\1\332"+
    "\2\4\1\0\32\4\10\0\1\4\4\0\2\4\1\0"+
    "\4\4\1\333\2\4\1\0\32\4\10\0\1\4\4\0"+
    "\2\4\1\0\7\4\1\0\3\4\1\334\26\4\10\0"+
    "\1\4\4\0\2\4\1\0\4\4\1\335\2\4\1\0"+
    "\32\4\10\0\1\4\4\0\2\4\1\0\7\4\1\0"+
    "\1\336\31\4\10\0\1\4\4\0\2\4\1\0\7\4"+
    "\1\0\16\4\1\337\13\4\10\0\1\4\4\0\2\4"+
    "\1\0\7\4\1\0\6\4\1\340\23\4\10\0\1\4"+
    "\4\0\2\4\1\0\7\4\1\0\10\4\1\146\21\4"+
    "\10\0\1\4\4\0\2\4\1\0\6\4\1\341\1\0"+
    "\32\4\10\0\1\4\4\0\2\4\1\0\7\4\1\0"+
    "\2\4\1\342\27\4\10\0\1\4\4\0\2\4\1\0"+
    "\7\4\1\0\4\4\1\343\25\4\10\0\1\4\4\0"+
    "\2\4\1\0\4\4\1\344\2\4\1\0\32\4\10\0"+
    "\1\4\4\0\2\4\1\0\6\4\1\345\1\0\32\4"+
    "\10\0\1\4\4\0\2\4\1\0\7\4\1\0\4\4"+
    "\1\346\25\4\10\0\1\4\4\0\2\4\1\0\6\4"+
    "\1\347\1\0\32\4\10\0\1\4\4\0\2\4\1\0"+
    "\2\4\1\350\4\4\1\0\32\4\10\0\1\4\4\0"+
    "\2\4\1\0\7\4\1\0\7\4\1\351\22\4\10\0"+
    "\1\4\4\0\2\4\1\0\4\4\1\352\2\4\1\0"+
    "\32\4\10\0\1\4\4\0\2\4\1\0\7\4\1\0"+
    "\1\353\31\4\10\0\1\4\4\0\2\4\1\0\7\4"+
    "\1\0\16\4\1\354\13\4\10\0\1\4\4\0\2\4"+
    "\1\0\7\4\1\0\1\4\1\355\30\4\10\0\1\4"+
    "\4\0\2\4\1\0\4\4\1\356\2\4\1\0\32\4"+
    "\10\0\1\4\4\0\2\4\1\0\7\4\1\0\4\4"+
    "\1\357\25\4\10\0\1\4\4\0\2\4\1\0\3\4"+
    "\1\257\3\4\1\0\32\4\10\0\1\4\4\0\2\4"+
    "\1\0\6\4\1\360\1\0\32\4\10\0\1\4\4\0"+
    "\2\4\1\0\2\4\1\361\4\4\1\0\6\4\1\362"+
    "\23\4\10\0\1\4\4\0\2\4\1\0\7\4\1\0"+
    "\10\4\1\363\21\4\10\0\1\4\4\0\2\4\1\0"+
    "\7\4\1\0\11\4\1\364\20\4\10\0\1\4\4\0"+
    "\2\4\1\0\7\4\1\0\6\4\1\365\23\4\10\0"+
    "\1\4\4\0\2\4\1\0\7\4\1\0\7\4\1\366"+
    "\22\4\10\0\1\4\4\0\2\4\1\0\4\4\1\367"+
    "\2\4\1\0\32\4\10\0\1\4\4\0\2\4\1\0"+
    "\4\4\1\370\2\4\1\0\32\4\10\0\1\4\4\0"+
    "\2\4\1\0\7\4\1\0\10\4\1\371\21\4\10\0"+
    "\1\4\4\0\2\4\1\0\7\4\1\0\1\372\31\4"+
    "\10\0\1\4\4\0\2\4\1\0\7\4\1\0\6\4"+
    "\1\373\23\4\10\0\1\4\4\0\2\4\1\0\7\4"+
    "\1\0\10\4\1\374\21\4\10\0\1\4\4\0\2\4"+
    "\1\0\7\4\1\0\11\4\1\375\20\4\10\0\1\4"+
    "\4\0\2\4\1\0\7\4\1\0\6\4\1\376\23\4"+
    "\10\0\1\4\4\0\2\4\1\0\3\4\1\377\3\4"+
    "\1\0\32\4\10\0\1\4\4\0\2\4\1\0\7\4"+
    "\1\0\6\4\1\257\23\4\10\0\1\4\4\0\2\4"+
    "\1\0\7\4\1\0\4\4\1\u0100\25\4\10\0\1\4"+
    "\4\0\2\4\1\0\7\4\1\0\31\4\1\227\10\0"+
    "\1\4\4\0\2\4\1\0\7\4\1\0\16\4\1\u0101"+
    "\13\4\10\0\1\4\4\0\2\4\1\0\7\4\1\0"+
    "\11\4\1\u0102\20\4\10\0\1\4\4\0\2\4\1\0"+
    "\6\4\1\u0103\1\0\32\4\10\0\1\4\4\0\2\4"+
    "\1\0\7\4\1\0\3\4\1\u0104\26\4\10\0\1\4"+
    "\4\0\2\4\1\0\7\4\1\0\1\u0105\31\4\10\0"+
    "\1\4\4\0\2\4\1\0\2\4\1\u0106\4\4\1\0"+
    "\32\4\10\0\1\4\4\0\2\4\1\0\6\4\1\u0107"+
    "\1\0\32\4\10\0\1\4\4\0\2\4\1\0\7\4"+
    "\1\0\6\4\1\u0108\23\4\10\0\1\4\4\0\2\4"+
    "\1\0\6\4\1\u0109\1\0\32\4\10\0\1\4\4\0"+
    "\2\4\1\0\7\4\1\0\16\4\1\u010a\13\4\10\0"+
    "\1\4\4\0\2\4\1\0\7\4\1\0\4\4\1\u010b"+
    "\25\4\10\0\1\4\4\0\2\4\1\0\7\4\1\0"+
    "\6\4\1\u010c\23\4\10\0\1\4\4\0\2\4\1\0"+
    "\7\4\1\0\6\4\1\u010d\23\4\10\0\1\4\4\0"+
    "\2\4\1\0\2\4\1\u010e\4\4\1\0\32\4\10\0"+
    "\1\4\4\0\2\4\1\0\7\4\1\0\15\4\1\u010f"+
    "\14\4\10\0\1\4\4\0\2\4\1\0\7\4\1\0"+
    "\4\4\1\u0110\25\4\10\0\1\4\4\0\2\4\1\0"+
    "\6\4\1\u0111\1\0\32\4\10\0\1\4\4\0\2\4"+
    "\1\0\7\4\1\0\15\4\1\u0112\14\4\10\0\1\4"+
    "\4\0\2\4\1\0\6\4\1\u0113\1\0\32\4\10\0"+
    "\1\4\3\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[12100];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\1\11\2\1\1\11\23\1\1\11\2\1\3\11"+
    "\1\1\1\11\26\1\2\0\2\11\2\1\1\11\5\1"+
    "\1\11\16\1\1\11\3\0\1\11\2\1\1\11\1\1"+
    "\1\11\13\1\1\0\1\1\1\0\252\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[275];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  @SuppressWarnings("unused")
private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  @SuppressWarnings("unused")
private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
	int openTagCounter = 0;
	int debug = 0;
	String context = new String();

  private Symbol symbol(int type, String context) {
    return new Symbol(type, yyline, yycolumn, new SymbolValue(context));
  }
  private Symbol symbol(int type, String value, String context) {
    return new Symbol(type, yyline, yycolumn, new SymbolValue(value, context));
  }

	public void setContext(String newContext) {
 		context = newContext;
	}
	
	public void activateDebug() {
 		debug = 1;
	}

	public void desactivateDebug() {
 		debug = 0;
	}
 


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public TagProcessLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public TagProcessLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1658) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzPushbackPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead < 0) {
      return true;
    }
    else {
      zzEndRead+= numRead;
      return false;
    }
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 24: 
          { /* ignore */
          }
        case 43: break;
        case 13: 
          { if (openTagCounter == 0) {
						if (debug == 1)
							System.out.println("CODE: " + yytext()); 
						return symbol(TagProcessSymbols.CODE, new String(yytext()), context);
					} else {
						if (debug == 1)
							System.out.println("ID: " + yytext()); 
						return symbol(TagProcessSymbols.ID, new String(yytext()), context);
					}
          }
        case 44: break;
        case 40: 
          { if (openTagCounter == 0) {
						if (debug == 1)
							System.out.println("CODE: " + yytext());
						return symbol(TagProcessSymbols.CODE, new String(yytext()), context);
					} else {
						if (debug == 1)
							System.out.println("AVAILABLERESOURCES: " + yytext());
						return symbol(TagProcessSymbols.AVAILABLERESOURCES, new String(yytext()), context);
					}
          }
        case 45: break;
        case 5: 
          { if (openTagCounter == 0) {
										if (debug == 1)
											System.out.println("CODE: " + yytext()); 
										return symbol(TagProcessSymbols.CODE, new String(yytext()), context);
									} else {
										if (debug == 1)
											System.out.println("WHITESPACE: " + yytext()); 
										return symbol(TagProcessSymbols.SPACE, new String(yytext()), context);
									}
          }
        case 46: break;
        case 42: 
          { if (openTagCounter == 0) {
															if (debug == 1)
																System.out.println("CODE: " + yytext()); 
															return symbol(TagProcessSymbols.CODE, new String(yytext()), context);
														} else {
															if (debug == 1)
																System.out.println("INITIALSIMULATIONTIME: " + yytext()); 
															return symbol(TagProcessSymbols.INITIALSIMULATIONTIME, new String(yytext()), context);
														}
          }
        case 47: break;
        case 32: 
          { if (openTagCounter == 0) {
						if (debug == 1)
							System.out.println("CODE: " + yytext()); 
						return symbol(TagProcessSymbols.CODE, new String(yytext()), context);
					} else {
						if (debug == 1)
							System.out.println("QUEUESIZE: " + yytext()); 
						return symbol(TagProcessSymbols.QUEUESIZE, new String(yytext()), context);
					}
          }
        case 48: break;
        case 23: 
          { if (openTagCounter == 0) {
										if (debug == 1)
											System.out.println("CODE: " + yytext()); 
										return symbol(TagProcessSymbols.CODE, new String(yytext()), context);
									} else {
										if (debug == 1)
											System.out.println("GETTAG: " + yytext());
										return symbol(TagProcessSymbols.GETTAG, new String(yytext()), context);
									}
          }
        case 49: break;
        case 8: 
          { if (openTagCounter == 0) {
						if (debug == 1)
							System.out.println("CODE: " + yytext()); 
						return symbol(TagProcessSymbols.CODE, new String(yytext()), context);
					} else {
						if (debug == 1)
							System.out.println("COMMA: " + yytext()); 
						return symbol(TagProcessSymbols.COMMA, new String(yytext()), context); 	
					}
          }
        case 50: break;
        case 17: 
          { if (openTagCounter == 0) {
										if (debug == 1)
											System.out.println("CODE: " + yytext()); 
										return symbol(TagProcessSymbols.CODE, new String(yytext()), context);
									} else {
										if (debug == 1)
											System.out.println("SETTAG: " + yytext());
										return symbol(TagProcessSymbols.SETTAG, new String(yytext()), context);
									}
          }
        case 51: break;
        case 29: 
          { if (openTagCounter == 0) {
						if (debug == 1)
							System.out.println("CODE: " + yytext()); 
						return symbol(TagProcessSymbols.CODE, new String(yytext()), context);
					} else {
						if (debug == 1)
							System.out.println("VARVIEW: " + yytext()); 
						return symbol(TagProcessSymbols.VARVIEW, new String(yytext()), context);
					}
          }
        case 52: break;
        case 30: 
          { if (openTagCounter == 0) {
						if (debug == 1)
							System.out.println("CODE: " + yytext()); 
						return symbol(TagProcessSymbols.CODE, new String(yytext()), context);
					} else {
						if (debug == 1)
							System.out.println("LASTCODE: " + yytext()); 
						return symbol(TagProcessSymbols.LASTSTART, new String(yytext()), context);
					}
          }
        case 53: break;
        case 2: 
          { if (openTagCounter == 0) {
						if (debug == 1)
							System.out.println("CODE: " + yytext()); 
						return symbol(TagProcessSymbols.CODE, new String(yytext()), context);
					} else {
						if (debug == 1)
								System.out.println("CHAR: " + yytext());
						return symbol(TagProcessSymbols.CHAR, new String(yytext()), context);
					}
          }
        case 54: break;
        case 10: 
          { if (openTagCounter == 0) {
										if (debug == 1)
											System.out.println("CODE: " + yytext()); 
										return symbol(TagProcessSymbols.CODE, new String(yytext()), context);
									} else {
										if (debug == 1)
											System.out.println("SIMUL:" + yytext());	
										return symbol(TagProcessSymbols.SIMUL, new String(yytext()), context); 	
									}
          }
        case 55: break;
        case 1: 
          { if (openTagCounter == 0) {
							if (debug == 1)
								System.out.println("CODE: " + yytext()); 
							return symbol(TagProcessSymbols.CODE, new String(yytext()), context);
						} else {
							if (debug == 1)
								System.out.println("VALUE: " + yytext()); 
							return symbol(TagProcessSymbols.VALUE, new String(yytext()), context);
						}
          }
        case 56: break;
        case 33: 
          { if (openTagCounter == 0) {
						if (debug == 1)
							System.out.println("CODE: " + yytext()); 
						return symbol(TagProcessSymbols.CODE, new String(yytext()), context);
					} else {
							if (debug == 1)
								System.out.println("LASTFINISH: " + yytext()); 
						return symbol(TagProcessSymbols.LASTFINISH, new String(yytext()), context);
					}
          }
        case 57: break;
        case 39: 
          { if (openTagCounter == 0) {
														if (debug == 1)
															System.out.println("CODE: " + yytext()); 
														return symbol(TagProcessSymbols.CODE, new String(yytext()), context);
													} else {
														if (debug == 1)
															System.out.println("TOTALRESOURCETYPES: " + yytext()); 
														return symbol(TagProcessSymbols.TOTALRESOURCETYPES, new String(yytext()), context);
													}
          }
        case 58: break;
        case 21: 
          { if (openTagCounter == 0) {
												if (debug == 1)
													System.out.println("CODE: " + yytext()); 
												return symbol(TagProcessSymbols.CODE, new String(yytext()), context);
											} else {
												if (debug == 1)
													System.out.println("DINELEM: " + yytext());
												return symbol(TagProcessSymbols.DINELEM, new String(yytext()), context); 	
											}
          }
        case 59: break;
        case 14: 
          { openTagCounter++;
									if (debug == 1)
										System.out.println("STARTTAG: " + yytext());
									return symbol(TagProcessSymbols.STARTTAG, new String(yytext()), context);
          }
        case 60: break;
        case 19: 
          { if (openTagCounter == 0) {
													if (debug == 1)
														System.out.println("CODE: " + yytext()); 
													return symbol(TagProcessSymbols.CODE, new String(yytext()), context);
												} else {
													if (debug == 1)
														System.out.println("RESTYPEPARAM: " + yytext()); 
													return symbol(TagProcessSymbols.RESTYPEPARAM, new String(yytext()), context); 
												}
          }
        case 61: break;
        case 20: 
          { if (openTagCounter == 0) {
													if (debug == 1)
														System.out.println("CODE: " + yytext()); 
													return symbol(TagProcessSymbols.CODE, new String(yytext()), context);
												} else {
													if (debug == 1)
														System.out.println("ELEMTYPEPARAM: " + yytext()); 
													return symbol(TagProcessSymbols.ELEMTYPEPARAM, new String(yytext()), context); 
												}
          }
        case 62: break;
        case 18: 
          { if (openTagCounter == 0) {
									if (debug == 1)
										System.out.println("CODE: " + yytext()); 
									return symbol(TagProcessSymbols.CODE, new String(yytext()), context);
								} else {
									if (debug == 1)
										System.out.println("RES: " + yytext());
  								return symbol(TagProcessSymbols.RES, new String(yytext()), context); 
								}
          }
        case 63: break;
        case 12: 
          { if (openTagCounter == 0) {
														if (debug == 1)
															System.out.println("CODE: " + yytext()); 
														return symbol(TagProcessSymbols.CODE, new String(yytext()), context);
													} else {
														if (debug == 1)
															System.out.println("DINELEMPARAM: " + yytext()); 
														return symbol(TagProcessSymbols.DINELEMPARAM, new String(yytext()), context); 
													}
          }
        case 64: break;
        case 15: 
          { openTagCounter--;
							if (debug == 1)
								System.out.println("ENDTAG");
							return symbol(TagProcessSymbols.ENDTAG, new String(yytext()), context);
          }
        case 65: break;
        case 11: 
          { if (openTagCounter == 0) {
											if (debug == 1)
												System.out.println("CODE: " + yytext()); 
											return symbol(TagProcessSymbols.CODE, new String(yytext()), context);
										} else {
											if (debug == 1)
												System.out.println("RESPARAM: " + yytext()); 
											return symbol(TagProcessSymbols.RESPARAM, new String(yytext()), context); 
										}
          }
        case 66: break;
        case 4: 
          { if (openTagCounter == 0) {
												if (debug == 1)
													System.out.println("CODE: " + yytext()); 
												return symbol(TagProcessSymbols.CODE, new String(yytext()), context);
											} else {
												if (debug == 1)
													System.out.println("SIMULPARAM: " + yytext()); 
												return symbol(TagProcessSymbols.SIMULPARAM, new String(yytext()), context); 
											}
          }
        case 67: break;
        case 6: 
          { if (openTagCounter == 0) {
						if (debug == 1)
							System.out.println("CODE: " + yytext()); 
						return symbol(TagProcessSymbols.CODE,new String(yytext()), context);
					} else {
						if (debug == 1)
							System.out.println("LPAREN: " + yytext()); 
						return symbol(TagProcessSymbols.LPAREN, new String(yytext()), context); 	
					}
          }
        case 68: break;
        case 38: 
          { if (openTagCounter == 0) {
														if (debug == 1)
															System.out.println("CODE: " + yytext()); 
														return symbol(TagProcessSymbols.CODE, new String(yytext()), context);
													} else {
														if (debug == 1)
															System.out.println("TOTALELEMENTTYPES: " + yytext()); 
														return symbol(TagProcessSymbols.TOTALELEMENTTYPES, new String(yytext()), context);
													}
          }
        case 69: break;
        case 31: 
          { if (openTagCounter == 0) {
						if (debug == 1)
							System.out.println("CODE: " + yytext());
						return symbol(TagProcessSymbols.CODE, new String(yytext()), context);
					} else {
						if (debug == 1)
							System.out.println("CURRENTTS: " + yytext());
						return symbol(TagProcessSymbols.CURRENTTS, new String(yytext()), context);
					}
          }
        case 70: break;
        case 9: 
          { if (openTagCounter == 0) {
											if (debug == 1)
												System.out.println("CODE: " + yytext()); 
											return symbol(TagProcessSymbols.CODE, new String(yytext()), context);
										} else {
											if (debug == 1)
												System.out.println("ACTPARAM: " + yytext()); 
											return symbol(TagProcessSymbols.ACTPARAM, new String(yytext()), context); 
										}
          }
        case 71: break;
        case 34: 
          { if (openTagCounter == 0) {
												if (debug == 1)
													System.out.println("CODE: " + yytext()); 
												return symbol(TagProcessSymbols.CODE, new String(yytext()), context);
											} else {
												if (debug == 1)
													System.out.println("TOTALRESOURCES: " + yytext()); 
												return symbol(TagProcessSymbols.TOTALRESOURCES, new String(yytext()), context);
											}
          }
        case 72: break;
        case 7: 
          { if (openTagCounter == 0) {
						if (debug == 1)
							System.out.println("CODE: " + yytext()); 
						return symbol(TagProcessSymbols.CODE, new String(yytext()), context);
					} else {
						if (debug == 1)
							System.out.println("RPAREN: " + yytext()); 
						return symbol(TagProcessSymbols.RPAREN, new String(yytext()), context); 	
					}
          }
        case 73: break;
        case 28: 
          { if (openTagCounter == 0) {
											if (debug == 1)
												System.out.println("CODE: " + yytext()); 
												return symbol(TagProcessSymbols.CODE, new String(yytext()), context);
										} else {
											if (debug == 1)
												System.out.println("WORKGROUPPARAM: " + yytext()); 
												return symbol(TagProcessSymbols.WGPARAM, new String(yytext()), context); 
											}
          }
        case 74: break;
        case 3: 
          { if (openTagCounter == 0) {
						if (debug == 1)
							System.out.println("CODE: " + yytext()); 
						return symbol(TagProcessSymbols.CODE, new String(yytext()), context);
					} else {
						if (debug == 1)
							System.out.println("DOT: " + yytext()); 
						return symbol(TagProcessSymbols.DOT, new String(yytext()), context); 	
					}
          }
        case 75: break;
        case 27: 
          { if (openTagCounter == 0) {
														if (debug == 1)
															System.out.println("CODE: " + yytext()); 
														return symbol(TagProcessSymbols.CODE, new String(yytext()), context);
													} else {
														if (debug == 1)
															System.out.println("DINELEMENTTYPE: " + yytext()); 
														return symbol(TagProcessSymbols.DINELEMTYPE, new String(yytext()), context); 
													}
          }
        case 76: break;
        case 16: 
          { if (openTagCounter == 0) {
									if (debug == 1)
										System.out.println("CODE: " + yytext()); 
									return symbol(TagProcessSymbols.CODE, new String(yytext()), context);
								} else {
									if (debug == 1)
										System.out.println("ACT: " + yytext());
  								return symbol(TagProcessSymbols.ACT, new String(yytext()), context); 
								}
          }
        case 77: break;
        case 25: 
          { if (openTagCounter == 0) {
											if (debug == 1)
												System.out.println("CODE: " + yytext()); 
											return symbol(TagProcessSymbols.CODE, new String(yytext()), context);
										} else {
											if (debug == 1)
												System.out.println("RESTYPE:" + yytext());	
  										return symbol(TagProcessSymbols.RESTYPE, new String(yytext()), context); 
										}
          }
        case 78: break;
        case 26: 
          { if (openTagCounter == 0) {
										if (debug == 1)
											System.out.println("CODE: " + yytext()); 
										return symbol(TagProcessSymbols.CODE, new String(yytext()), context);
									} else {
										if (debug == 1)
											System.out.println("ELEMTYPE: " + yytext());
  									return symbol(TagProcessSymbols.ELEMTYPE, new String(yytext()), context); 
									}
          }
        case 79: break;
        case 37: 
          { if (openTagCounter == 0) {
												if (debug == 1)
													System.out.println("CODE: " + yytext()); 
												return symbol(TagProcessSymbols.CODE, new String(yytext()), context);
											} else {
												if (debug == 1)
													System.out.println("TOTALWORKGROUPS: " + yytext()); 
												return symbol(TagProcessSymbols.TOTALWORKGROUPS, new String(yytext()), context);
											}
          }
        case 80: break;
        case 35: 
          { if (openTagCounter == 0) {
						if (debug == 1)
							System.out.println("CODE: " + yytext()); 
						return symbol(TagProcessSymbols.CODE, new String(yytext()), context);
					} else {
						if (debug == 1)
							System.out.println("ACTIVEELEMENTS: " + yytext()); 
						return symbol(TagProcessSymbols.ACTIVEELEMENTS, new String(yytext()), context);
					}
          }
        case 81: break;
        case 41: 
          { if (openTagCounter == 0) {
														if (debug == 1)
															System.out.println("CODE: " + yytext()); 
														return symbol(TagProcessSymbols.CODE, new String(yytext()), context);
													} else {
														if (debug == 1)
															System.out.println("FINALSIMULATIONTIME: " + yytext()); 
														return symbol(TagProcessSymbols.FINALSIMULATIONTIME, new String(yytext()), context);
													}
          }
        case 82: break;
        case 36: 
          { if (openTagCounter == 0) {
												if (debug == 1)
													System.out.println("CODE: " + yytext()); 
												return symbol(TagProcessSymbols.CODE, new String(yytext()), context);
											} else {
												if (debug == 1)
													System.out.println("CODE: " + yytext()); 
												return symbol(TagProcessSymbols.TOTALACTIVITIES, new String(yytext()), context);
											}
          }
        case 83: break;
        case 22: 
          { if (openTagCounter == 0) {
														if (debug == 1)
															System.out.println("CODE: " + yytext()); 
														return symbol(TagProcessSymbols.CODE, new String(yytext()), context);
													} else {
														if (debug == 1)
															System.out.println("DINELEMTYPEPARAM: " + yytext()); 
														return symbol(TagProcessSymbols.DINELEMTYPEPARAM, new String(yytext()), context); 
													}
          }
        case 84: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { 	return symbol(TagProcessSymbols.EOF, context);
 }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
